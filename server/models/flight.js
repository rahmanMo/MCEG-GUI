// model definition for individual flights
// STG3D1 means stage 3 today. D2, D3, ... are following days

const mongoose = require("mongoose");
const Schema = mongoose.Schema;

// Stage 1

const STG1D0 = mongoose.model("STG1D0", new Schema ({
  recordStatus: Schema.Types.Mixed,
  lastDateModified: Schema.Types.Mixed,
  lastTimeModified: Schema.Types.Mixed,
  lastUserToModify: Schema.Types.Mixed,
  legDepartureDate: Schema.Types.Mixed,
  airlineCode: Schema.Types.Mixed,
  identifier: Schema.Types.Mixed,
  sequence: Schema.Types.Mixed,
  flightOriginDay: Schema.Types.Mixed,
  numericFlightDate: Schema.Types.Mixed,
  numGMTDate: Schema.Types.Mixed,
  STDudt: Schema.Types.Mixed,
  STAudt: Schema.Types.Mixed,
  tailNumber: Schema.Types.Mixed,
  numLastDateModified: Schema.Types.Mixed,
  flightStatus: Schema.Types.Mixed,
  origin: Schema.Types.Mixed,
  STDLocal: Schema.Types.Mixed,
  dispatchDesk: Schema.Types.Mixed,
  STDGMTVariance: Schema.Types.Mixed,
  destination: Schema.Types.Mixed,
  STALocal: Schema.Types.Mixed,
  STAGMTVariance: Schema.Types.Mixed,
  OAGEquipmentType: Schema.Types.Mixed,
  ACConfiguration: Schema.Types.Mixed,
  serviceType: Schema.Types.Mixed,
  originGate: Schema.Types.Mixed,
  ETDlocal: Schema.Types.Mixed,
  ETDudt: Schema.Types.Mixed,
  TAXIutc: Schema.Types.Mixed,
  OUTudt: Schema.Types.Mixed,
  OFFudt: Schema.Types.Mixed,
  destinationGate: Schema.Types.Mixed,
  ETAlocal: Schema.Types.Mixed,
  ETAudt: Schema.Types.Mixed,
  ONudt: Schema.Types.Mixed,
  INudt: Schema.Types.Mixed,
  previousTailNumber: Schema.Types.Mixed,
  ETE: Schema.Types.Mixed,
  DCNutc: Schema.Types.Mixed,
  ETOutc: Schema.Types.Mixed,
  EONutc: Schema.Types.Mixed,
  EDTCutc: Schema.Types.Mixed,
  flightType: Schema.Types.Mixed,
  newDepartureCity: Schema.Types.Mixed,
  newArrivalCity: Schema.Types.Mixed,
  SchedOAGEquipType: Schema.Types.Mixed,
  OAGEquipSubType: Schema.Types.Mixed,
  csvFSDailyID: Schema.Types.Mixed,
  tailNumBeforeCancel: Schema.Types.Mixed,
  CTAUTC: Schema.Types.Mixed,
  cancelled: Schema.Types.Mixed,
  replaced: Schema.Types.Mixed,
  ATCStatus: Schema.Types.Mixed,
  scheduledFlightType: Schema.Types.Mixed,
  aircraftRouting: Schema.Types.Mixed,
  mealService: Schema.Types.Mixed,
  hub: Schema.Types.Mixed,
  landingRestriction: Schema.Types.Mixed,
  headStartFlight: Schema.Types.Mixed,
  actualDeparture: Schema.Types.Mixed,
  specialFlight: Schema.Types.Mixed,
  actualArrival: Schema.Types.Mixed,
  scheduledTaxiOut: Schema.Types.Mixed,
  scheduledTaxiIn: Schema.Types.Mixed,
  STOSetByUser: Schema.Types.Mixed,
  STISetByUser: Schema.Types.Mixed,
  CTFlightNumber: Schema.Types.Mixed
}), 'STG1D0');

const STG1D1 = mongoose.model("STG1D1", new Schema ({
  recordStatus: Schema.Types.Mixed,
  lastDateModified: Schema.Types.Mixed,
  lastTimeModified: Schema.Types.Mixed,
  lastUserToModify: Schema.Types.Mixed,
  legDepartureDate: Schema.Types.Mixed,
  airlineCode: Schema.Types.Mixed,
  identifier: Schema.Types.Mixed,
  sequence: Schema.Types.Mixed,
  flightOriginDay: Schema.Types.Mixed,
  numericFlightDate: Schema.Types.Mixed,
  numGMTDate: Schema.Types.Mixed,
  STDudt: Schema.Types.Mixed,
  STAudt: Schema.Types.Mixed,
  tailNumber: Schema.Types.Mixed,
  numLastDateModified: Schema.Types.Mixed,
  flightStatus: Schema.Types.Mixed,
  origin: Schema.Types.Mixed,
  STDLocal: Schema.Types.Mixed,
  dispatchDesk: Schema.Types.Mixed,
  STDGMTVariance: Schema.Types.Mixed,
  destination: Schema.Types.Mixed,
  STALocal: Schema.Types.Mixed,
  STAGMTVariance: Schema.Types.Mixed,
  OAGEquipmentType: Schema.Types.Mixed,
  ACConfiguration: Schema.Types.Mixed,
  serviceType: Schema.Types.Mixed,
  originGate: Schema.Types.Mixed,
  ETDlocal: Schema.Types.Mixed,
  ETDudt: Schema.Types.Mixed,
  TAXIutc: Schema.Types.Mixed,
  OUTudt: Schema.Types.Mixed,
  OFFudt: Schema.Types.Mixed,
  destinationGate: Schema.Types.Mixed,
  ETAlocal: Schema.Types.Mixed,
  ETAudt: Schema.Types.Mixed,
  ONudt: Schema.Types.Mixed,
  INudt: Schema.Types.Mixed,
  previousTailNumber: Schema.Types.Mixed,
  ETE: Schema.Types.Mixed,
  DCNutc: Schema.Types.Mixed,
  ETOutc: Schema.Types.Mixed,
  EONutc: Schema.Types.Mixed,
  EDTCutc: Schema.Types.Mixed,
  flightType: Schema.Types.Mixed,
  newDepartureCity: Schema.Types.Mixed,
  newArrivalCity: Schema.Types.Mixed,
  SchedOAGEquipType: Schema.Types.Mixed,
  OAGEquipSubType: Schema.Types.Mixed,
  csvFSDailyID: Schema.Types.Mixed,
  tailNumBeforeCancel: Schema.Types.Mixed,
  CTAUTC: Schema.Types.Mixed,
  cancelled: Schema.Types.Mixed,
  replaced: Schema.Types.Mixed,
  ATCStatus: Schema.Types.Mixed,
  scheduledFlightType: Schema.Types.Mixed,
  aircraftRouting: Schema.Types.Mixed,
  mealService: Schema.Types.Mixed,
  hub: Schema.Types.Mixed,
  landingRestriction: Schema.Types.Mixed,
  headStartFlight: Schema.Types.Mixed,
  actualDeparture: Schema.Types.Mixed,
  specialFlight: Schema.Types.Mixed,
  actualArrival: Schema.Types.Mixed,
  scheduledTaxiOut: Schema.Types.Mixed,
  scheduledTaxiIn: Schema.Types.Mixed,
  STOSetByUser: Schema.Types.Mixed,
  STISetByUser: Schema.Types.Mixed,
  CTFlightNumber: Schema.Types.Mixed
}), 'STG1D1');

const STG1D2 = mongoose.model("STG1D2", new Schema ({
  recordStatus: Schema.Types.Mixed,
  lastDateModified: Schema.Types.Mixed,
  lastTimeModified: Schema.Types.Mixed,
  lastUserToModify: Schema.Types.Mixed,
  legDepartureDate: Schema.Types.Mixed,
  airlineCode: Schema.Types.Mixed,
  identifier: Schema.Types.Mixed,
  sequence: Schema.Types.Mixed,
  flightOriginDay: Schema.Types.Mixed,
  numericFlightDate: Schema.Types.Mixed,
  numGMTDate: Schema.Types.Mixed,
  STDudt: Schema.Types.Mixed,
  STAudt: Schema.Types.Mixed,
  tailNumber: Schema.Types.Mixed,
  numLastDateModified: Schema.Types.Mixed,
  flightStatus: Schema.Types.Mixed,
  origin: Schema.Types.Mixed,
  STDLocal: Schema.Types.Mixed,
  dispatchDesk: Schema.Types.Mixed,
  STDGMTVariance: Schema.Types.Mixed,
  destination: Schema.Types.Mixed,
  STALocal: Schema.Types.Mixed,
  STAGMTVariance: Schema.Types.Mixed,
  OAGEquipmentType: Schema.Types.Mixed,
  ACConfiguration: Schema.Types.Mixed,
  serviceType: Schema.Types.Mixed,
  originGate: Schema.Types.Mixed,
  ETDlocal: Schema.Types.Mixed,
  ETDudt: Schema.Types.Mixed,
  TAXIutc: Schema.Types.Mixed,
  OUTudt: Schema.Types.Mixed,
  OFFudt: Schema.Types.Mixed,
  destinationGate: Schema.Types.Mixed,
  ETAlocal: Schema.Types.Mixed,
  ETAudt: Schema.Types.Mixed,
  ONudt: Schema.Types.Mixed,
  INudt: Schema.Types.Mixed,
  previousTailNumber: Schema.Types.Mixed,
  ETE: Schema.Types.Mixed,
  DCNutc: Schema.Types.Mixed,
  ETOutc: Schema.Types.Mixed,
  EONutc: Schema.Types.Mixed,
  EDTCutc: Schema.Types.Mixed,
  flightType: Schema.Types.Mixed,
  newDepartureCity: Schema.Types.Mixed,
  newArrivalCity: Schema.Types.Mixed,
  SchedOAGEquipType: Schema.Types.Mixed,
  OAGEquipSubType: Schema.Types.Mixed,
  csvFSDailyID: Schema.Types.Mixed,
  tailNumBeforeCancel: Schema.Types.Mixed,
  CTAUTC: Schema.Types.Mixed,
  cancelled: Schema.Types.Mixed,
  replaced: Schema.Types.Mixed,
  ATCStatus: Schema.Types.Mixed,
  scheduledFlightType: Schema.Types.Mixed,
  aircraftRouting: Schema.Types.Mixed,
  mealService: Schema.Types.Mixed,
  hub: Schema.Types.Mixed,
  landingRestriction: Schema.Types.Mixed,
  headStartFlight: Schema.Types.Mixed,
  actualDeparture: Schema.Types.Mixed,
  specialFlight: Schema.Types.Mixed,
  actualArrival: Schema.Types.Mixed,
  scheduledTaxiOut: Schema.Types.Mixed,
  scheduledTaxiIn: Schema.Types.Mixed,
  STOSetByUser: Schema.Types.Mixed,
  STISetByUser: Schema.Types.Mixed,
  CTFlightNumber: Schema.Types.Mixed
}), 'STG1D2');

const STG1D3 = mongoose.model("STG1D3", new Schema ({
  recordStatus: Schema.Types.Mixed,
  lastDateModified: Schema.Types.Mixed,
  lastTimeModified: Schema.Types.Mixed,
  lastUserToModify: Schema.Types.Mixed,
  legDepartureDate: Schema.Types.Mixed,
  airlineCode: Schema.Types.Mixed,
  identifier: Schema.Types.Mixed,
  sequence: Schema.Types.Mixed,
  flightOriginDay: Schema.Types.Mixed,
  numericFlightDate: Schema.Types.Mixed,
  numGMTDate: Schema.Types.Mixed,
  STDudt: Schema.Types.Mixed,
  STAudt: Schema.Types.Mixed,
  tailNumber: Schema.Types.Mixed,
  numLastDateModified: Schema.Types.Mixed,
  flightStatus: Schema.Types.Mixed,
  origin: Schema.Types.Mixed,
  STDLocal: Schema.Types.Mixed,
  dispatchDesk: Schema.Types.Mixed,
  STDGMTVariance: Schema.Types.Mixed,
  destination: Schema.Types.Mixed,
  STALocal: Schema.Types.Mixed,
  STAGMTVariance: Schema.Types.Mixed,
  OAGEquipmentType: Schema.Types.Mixed,
  ACConfiguration: Schema.Types.Mixed,
  serviceType: Schema.Types.Mixed,
  originGate: Schema.Types.Mixed,
  ETDlocal: Schema.Types.Mixed,
  ETDudt: Schema.Types.Mixed,
  TAXIutc: Schema.Types.Mixed,
  OUTudt: Schema.Types.Mixed,
  OFFudt: Schema.Types.Mixed,
  destinationGate: Schema.Types.Mixed,
  ETAlocal: Schema.Types.Mixed,
  ETAudt: Schema.Types.Mixed,
  ONudt: Schema.Types.Mixed,
  INudt: Schema.Types.Mixed,
  previousTailNumber: Schema.Types.Mixed,
  ETE: Schema.Types.Mixed,
  DCNutc: Schema.Types.Mixed,
  ETOutc: Schema.Types.Mixed,
  EONutc: Schema.Types.Mixed,
  EDTCutc: Schema.Types.Mixed,
  flightType: Schema.Types.Mixed,
  newDepartureCity: Schema.Types.Mixed,
  newArrivalCity: Schema.Types.Mixed,
  SchedOAGEquipType: Schema.Types.Mixed,
  OAGEquipSubType: Schema.Types.Mixed,
  csvFSDailyID: Schema.Types.Mixed,
  tailNumBeforeCancel: Schema.Types.Mixed,
  CTAUTC: Schema.Types.Mixed,
  cancelled: Schema.Types.Mixed,
  replaced: Schema.Types.Mixed,
  ATCStatus: Schema.Types.Mixed,
  scheduledFlightType: Schema.Types.Mixed,
  aircraftRouting: Schema.Types.Mixed,
  mealService: Schema.Types.Mixed,
  hub: Schema.Types.Mixed,
  landingRestriction: Schema.Types.Mixed,
  headStartFlight: Schema.Types.Mixed,
  actualDeparture: Schema.Types.Mixed,
  specialFlight: Schema.Types.Mixed,
  actualArrival: Schema.Types.Mixed,
  scheduledTaxiOut: Schema.Types.Mixed,
  scheduledTaxiIn: Schema.Types.Mixed,
  STOSetByUser: Schema.Types.Mixed,
  STISetByUser: Schema.Types.Mixed,
  CTFlightNumber: Schema.Types.Mixed
}), 'STG1D3');

const STG1D4 = mongoose.model("STG1D4", new Schema ({
  recordStatus: Schema.Types.Mixed,
  lastDateModified: Schema.Types.Mixed,
  lastTimeModified: Schema.Types.Mixed,
  lastUserToModify: Schema.Types.Mixed,
  legDepartureDate: Schema.Types.Mixed,
  airlineCode: Schema.Types.Mixed,
  identifier: Schema.Types.Mixed,
  sequence: Schema.Types.Mixed,
  flightOriginDay: Schema.Types.Mixed,
  numericFlightDate: Schema.Types.Mixed,
  numGMTDate: Schema.Types.Mixed,
  STDudt: Schema.Types.Mixed,
  STAudt: Schema.Types.Mixed,
  tailNumber: Schema.Types.Mixed,
  numLastDateModified: Schema.Types.Mixed,
  flightStatus: Schema.Types.Mixed,
  origin: Schema.Types.Mixed,
  STDLocal: Schema.Types.Mixed,
  dispatchDesk: Schema.Types.Mixed,
  STDGMTVariance: Schema.Types.Mixed,
  destination: Schema.Types.Mixed,
  STALocal: Schema.Types.Mixed,
  STAGMTVariance: Schema.Types.Mixed,
  OAGEquipmentType: Schema.Types.Mixed,
  ACConfiguration: Schema.Types.Mixed,
  serviceType: Schema.Types.Mixed,
  originGate: Schema.Types.Mixed,
  ETDlocal: Schema.Types.Mixed,
  ETDudt: Schema.Types.Mixed,
  TAXIutc: Schema.Types.Mixed,
  OUTudt: Schema.Types.Mixed,
  OFFudt: Schema.Types.Mixed,
  destinationGate: Schema.Types.Mixed,
  ETAlocal: Schema.Types.Mixed,
  ETAudt: Schema.Types.Mixed,
  ONudt: Schema.Types.Mixed,
  INudt: Schema.Types.Mixed,
  previousTailNumber: Schema.Types.Mixed,
  ETE: Schema.Types.Mixed,
  DCNutc: Schema.Types.Mixed,
  ETOutc: Schema.Types.Mixed,
  EONutc: Schema.Types.Mixed,
  EDTCutc: Schema.Types.Mixed,
  flightType: Schema.Types.Mixed,
  newDepartureCity: Schema.Types.Mixed,
  newArrivalCity: Schema.Types.Mixed,
  SchedOAGEquipType: Schema.Types.Mixed,
  OAGEquipSubType: Schema.Types.Mixed,
  csvFSDailyID: Schema.Types.Mixed,
  tailNumBeforeCancel: Schema.Types.Mixed,
  CTAUTC: Schema.Types.Mixed,
  cancelled: Schema.Types.Mixed,
  replaced: Schema.Types.Mixed,
  ATCStatus: Schema.Types.Mixed,
  scheduledFlightType: Schema.Types.Mixed,
  aircraftRouting: Schema.Types.Mixed,
  mealService: Schema.Types.Mixed,
  hub: Schema.Types.Mixed,
  landingRestriction: Schema.Types.Mixed,
  headStartFlight: Schema.Types.Mixed,
  actualDeparture: Schema.Types.Mixed,
  specialFlight: Schema.Types.Mixed,
  actualArrival: Schema.Types.Mixed,
  scheduledTaxiOut: Schema.Types.Mixed,
  scheduledTaxiIn: Schema.Types.Mixed,
  STOSetByUser: Schema.Types.Mixed,
  STISetByUser: Schema.Types.Mixed,
  CTFlightNumber: Schema.Types.Mixed
}), 'STG1D4');

const STG1D5 = mongoose.model("STG1D5", new Schema ({
  recordStatus: Schema.Types.Mixed,
  lastDateModified: Schema.Types.Mixed,
  lastTimeModified: Schema.Types.Mixed,
  lastUserToModify: Schema.Types.Mixed,
  legDepartureDate: Schema.Types.Mixed,
  airlineCode: Schema.Types.Mixed,
  identifier: Schema.Types.Mixed,
  sequence: Schema.Types.Mixed,
  flightOriginDay: Schema.Types.Mixed,
  numericFlightDate: Schema.Types.Mixed,
  numGMTDate: Schema.Types.Mixed,
  STDudt: Schema.Types.Mixed,
  STAudt: Schema.Types.Mixed,
  tailNumber: Schema.Types.Mixed,
  numLastDateModified: Schema.Types.Mixed,
  flightStatus: Schema.Types.Mixed,
  origin: Schema.Types.Mixed,
  STDLocal: Schema.Types.Mixed,
  dispatchDesk: Schema.Types.Mixed,
  STDGMTVariance: Schema.Types.Mixed,
  destination: Schema.Types.Mixed,
  STALocal: Schema.Types.Mixed,
  STAGMTVariance: Schema.Types.Mixed,
  OAGEquipmentType: Schema.Types.Mixed,
  ACConfiguration: Schema.Types.Mixed,
  serviceType: Schema.Types.Mixed,
  originGate: Schema.Types.Mixed,
  ETDlocal: Schema.Types.Mixed,
  ETDudt: Schema.Types.Mixed,
  TAXIutc: Schema.Types.Mixed,
  OUTudt: Schema.Types.Mixed,
  OFFudt: Schema.Types.Mixed,
  destinationGate: Schema.Types.Mixed,
  ETAlocal: Schema.Types.Mixed,
  ETAudt: Schema.Types.Mixed,
  ONudt: Schema.Types.Mixed,
  INudt: Schema.Types.Mixed,
  previousTailNumber: Schema.Types.Mixed,
  ETE: Schema.Types.Mixed,
  DCNutc: Schema.Types.Mixed,
  ETOutc: Schema.Types.Mixed,
  EONutc: Schema.Types.Mixed,
  EDTCutc: Schema.Types.Mixed,
  flightType: Schema.Types.Mixed,
  newDepartureCity: Schema.Types.Mixed,
  newArrivalCity: Schema.Types.Mixed,
  SchedOAGEquipType: Schema.Types.Mixed,
  OAGEquipSubType: Schema.Types.Mixed,
  csvFSDailyID: Schema.Types.Mixed,
  tailNumBeforeCancel: Schema.Types.Mixed,
  CTAUTC: Schema.Types.Mixed,
  cancelled: Schema.Types.Mixed,
  replaced: Schema.Types.Mixed,
  ATCStatus: Schema.Types.Mixed,
  scheduledFlightType: Schema.Types.Mixed,
  aircraftRouting: Schema.Types.Mixed,
  mealService: Schema.Types.Mixed,
  hub: Schema.Types.Mixed,
  landingRestriction: Schema.Types.Mixed,
  headStartFlight: Schema.Types.Mixed,
  actualDeparture: Schema.Types.Mixed,
  specialFlight: Schema.Types.Mixed,
  actualArrival: Schema.Types.Mixed,
  scheduledTaxiOut: Schema.Types.Mixed,
  scheduledTaxiIn: Schema.Types.Mixed,
  STOSetByUser: Schema.Types.Mixed,
  STISetByUser: Schema.Types.Mixed,
  CTFlightNumber: Schema.Types.Mixed
}), 'STG1D5');

const STG1D6 = mongoose.model("STG1D6", new Schema ({
  recordStatus: Schema.Types.Mixed,
  lastDateModified: Schema.Types.Mixed,
  lastTimeModified: Schema.Types.Mixed,
  lastUserToModify: Schema.Types.Mixed,
  legDepartureDate: Schema.Types.Mixed,
  airlineCode: Schema.Types.Mixed,
  identifier: Schema.Types.Mixed,
  sequence: Schema.Types.Mixed,
  flightOriginDay: Schema.Types.Mixed,
  numericFlightDate: Schema.Types.Mixed,
  numGMTDate: Schema.Types.Mixed,
  STDudt: Schema.Types.Mixed,
  STAudt: Schema.Types.Mixed,
  tailNumber: Schema.Types.Mixed,
  numLastDateModified: Schema.Types.Mixed,
  flightStatus: Schema.Types.Mixed,
  origin: Schema.Types.Mixed,
  STDLocal: Schema.Types.Mixed,
  dispatchDesk: Schema.Types.Mixed,
  STDGMTVariance: Schema.Types.Mixed,
  destination: Schema.Types.Mixed,
  STALocal: Schema.Types.Mixed,
  STAGMTVariance: Schema.Types.Mixed,
  OAGEquipmentType: Schema.Types.Mixed,
  ACConfiguration: Schema.Types.Mixed,
  serviceType: Schema.Types.Mixed,
  originGate: Schema.Types.Mixed,
  ETDlocal: Schema.Types.Mixed,
  ETDudt: Schema.Types.Mixed,
  TAXIutc: Schema.Types.Mixed,
  OUTudt: Schema.Types.Mixed,
  OFFudt: Schema.Types.Mixed,
  destinationGate: Schema.Types.Mixed,
  ETAlocal: Schema.Types.Mixed,
  ETAudt: Schema.Types.Mixed,
  ONudt: Schema.Types.Mixed,
  INudt: Schema.Types.Mixed,
  previousTailNumber: Schema.Types.Mixed,
  ETE: Schema.Types.Mixed,
  DCNutc: Schema.Types.Mixed,
  ETOutc: Schema.Types.Mixed,
  EONutc: Schema.Types.Mixed,
  EDTCutc: Schema.Types.Mixed,
  flightType: Schema.Types.Mixed,
  newDepartureCity: Schema.Types.Mixed,
  newArrivalCity: Schema.Types.Mixed,
  SchedOAGEquipType: Schema.Types.Mixed,
  OAGEquipSubType: Schema.Types.Mixed,
  csvFSDailyID: Schema.Types.Mixed,
  tailNumBeforeCancel: Schema.Types.Mixed,
  CTAUTC: Schema.Types.Mixed,
  cancelled: Schema.Types.Mixed,
  replaced: Schema.Types.Mixed,
  ATCStatus: Schema.Types.Mixed,
  scheduledFlightType: Schema.Types.Mixed,
  aircraftRouting: Schema.Types.Mixed,
  mealService: Schema.Types.Mixed,
  hub: Schema.Types.Mixed,
  landingRestriction: Schema.Types.Mixed,
  headStartFlight: Schema.Types.Mixed,
  actualDeparture: Schema.Types.Mixed,
  specialFlight: Schema.Types.Mixed,
  actualArrival: Schema.Types.Mixed,
  scheduledTaxiOut: Schema.Types.Mixed,
  scheduledTaxiIn: Schema.Types.Mixed,
  STOSetByUser: Schema.Types.Mixed,
  STISetByUser: Schema.Types.Mixed,
  CTFlightNumber: Schema.Types.Mixed
}), 'STG1D6');

const STG1D7 = mongoose.model("STG1D7", new Schema ({
  recordStatus: Schema.Types.Mixed,
  lastDateModified: Schema.Types.Mixed,
  lastTimeModified: Schema.Types.Mixed,
  lastUserToModify: Schema.Types.Mixed,
  legDepartureDate: Schema.Types.Mixed,
  airlineCode: Schema.Types.Mixed,
  identifier: Schema.Types.Mixed,
  sequence: Schema.Types.Mixed,
  flightOriginDay: Schema.Types.Mixed,
  numericFlightDate: Schema.Types.Mixed,
  numGMTDate: Schema.Types.Mixed,
  STDudt: Schema.Types.Mixed,
  STAudt: Schema.Types.Mixed,
  tailNumber: Schema.Types.Mixed,
  numLastDateModified: Schema.Types.Mixed,
  flightStatus: Schema.Types.Mixed,
  origin: Schema.Types.Mixed,
  STDLocal: Schema.Types.Mixed,
  dispatchDesk: Schema.Types.Mixed,
  STDGMTVariance: Schema.Types.Mixed,
  destination: Schema.Types.Mixed,
  STALocal: Schema.Types.Mixed,
  STAGMTVariance: Schema.Types.Mixed,
  OAGEquipmentType: Schema.Types.Mixed,
  ACConfiguration: Schema.Types.Mixed,
  serviceType: Schema.Types.Mixed,
  originGate: Schema.Types.Mixed,
  ETDlocal: Schema.Types.Mixed,
  ETDudt: Schema.Types.Mixed,
  TAXIutc: Schema.Types.Mixed,
  OUTudt: Schema.Types.Mixed,
  OFFudt: Schema.Types.Mixed,
  destinationGate: Schema.Types.Mixed,
  ETAlocal: Schema.Types.Mixed,
  ETAudt: Schema.Types.Mixed,
  ONudt: Schema.Types.Mixed,
  INudt: Schema.Types.Mixed,
  previousTailNumber: Schema.Types.Mixed,
  ETE: Schema.Types.Mixed,
  DCNutc: Schema.Types.Mixed,
  ETOutc: Schema.Types.Mixed,
  EONutc: Schema.Types.Mixed,
  EDTCutc: Schema.Types.Mixed,
  flightType: Schema.Types.Mixed,
  newDepartureCity: Schema.Types.Mixed,
  newArrivalCity: Schema.Types.Mixed,
  SchedOAGEquipType: Schema.Types.Mixed,
  OAGEquipSubType: Schema.Types.Mixed,
  csvFSDailyID: Schema.Types.Mixed,
  tailNumBeforeCancel: Schema.Types.Mixed,
  CTAUTC: Schema.Types.Mixed,
  cancelled: Schema.Types.Mixed,
  replaced: Schema.Types.Mixed,
  ATCStatus: Schema.Types.Mixed,
  scheduledFlightType: Schema.Types.Mixed,
  aircraftRouting: Schema.Types.Mixed,
  mealService: Schema.Types.Mixed,
  hub: Schema.Types.Mixed,
  landingRestriction: Schema.Types.Mixed,
  headStartFlight: Schema.Types.Mixed,
  actualDeparture: Schema.Types.Mixed,
  specialFlight: Schema.Types.Mixed,
  actualArrival: Schema.Types.Mixed,
  scheduledTaxiOut: Schema.Types.Mixed,
  scheduledTaxiIn: Schema.Types.Mixed,
  STOSetByUser: Schema.Types.Mixed,
  STISetByUser: Schema.Types.Mixed,
  CTFlightNumber: Schema.Types.Mixed
}), 'STG1D7');


// Stage 2

const STG2D0 = mongoose.model("STG2D0", new Schema ({
  recordStatus: Schema.Types.Mixed,
  lastDateModified: Schema.Types.Mixed,
  lastTimeModified: Schema.Types.Mixed,
  lastUserToModify: Schema.Types.Mixed,
  legDepartureDate: Schema.Types.Mixed,
  airlineCode: Schema.Types.Mixed,
  identifier: Schema.Types.Mixed,
  sequence: Schema.Types.Mixed,
  flightOriginDay: Schema.Types.Mixed,
  numericFlightDate: Schema.Types.Mixed,
  numGMTDate: Schema.Types.Mixed,
  STDudt: Schema.Types.Mixed,
  STAudt: Schema.Types.Mixed,
  tailNumber: Schema.Types.Mixed,
  numLastDateModified: Schema.Types.Mixed,
  flightStatus: Schema.Types.Mixed,
  origin: Schema.Types.Mixed,
  STDLocal: Schema.Types.Mixed,
  dispatchDesk: Schema.Types.Mixed,
  STDGMTVariance: Schema.Types.Mixed,
  destination: Schema.Types.Mixed,
  STALocal: Schema.Types.Mixed,
  STAGMTVariance: Schema.Types.Mixed,
  OAGEquipmentType: Schema.Types.Mixed,
  ACConfiguration: Schema.Types.Mixed,
  serviceType: Schema.Types.Mixed,
  originGate: Schema.Types.Mixed,
  ETDlocal: Schema.Types.Mixed,
  ETDudt: Schema.Types.Mixed,
  TAXIutc: Schema.Types.Mixed,
  OUTudt: Schema.Types.Mixed,
  OFFudt: Schema.Types.Mixed,
  destinationGate: Schema.Types.Mixed,
  ETAlocal: Schema.Types.Mixed,
  ETAudt: Schema.Types.Mixed,
  ONudt: Schema.Types.Mixed,
  INudt: Schema.Types.Mixed,
  previousTailNumber: Schema.Types.Mixed,
  ETE: Schema.Types.Mixed,
  DCNutc: Schema.Types.Mixed,
  ETOutc: Schema.Types.Mixed,
  EONutc: Schema.Types.Mixed,
  EDTCutc: Schema.Types.Mixed,
  flightType: Schema.Types.Mixed,
  newDepartureCity: Schema.Types.Mixed,
  newArrivalCity: Schema.Types.Mixed,
  SchedOAGEquipType: Schema.Types.Mixed,
  OAGEquipSubType: Schema.Types.Mixed,
  csvFSDailyID: Schema.Types.Mixed,
  tailNumBeforeCancel: Schema.Types.Mixed,
  CTAUTC: Schema.Types.Mixed,
  cancelled: Schema.Types.Mixed,
  replaced: Schema.Types.Mixed,
  ATCStatus: Schema.Types.Mixed,
  scheduledFlightType: Schema.Types.Mixed,
  aircraftRouting: Schema.Types.Mixed,
  mealService: Schema.Types.Mixed,
  hub: Schema.Types.Mixed,
  landingRestriction: Schema.Types.Mixed,
  headStartFlight: Schema.Types.Mixed,
  actualDeparture: Schema.Types.Mixed,
  specialFlight: Schema.Types.Mixed,
  actualArrival: Schema.Types.Mixed,
  scheduledTaxiOut: Schema.Types.Mixed,
  scheduledTaxiIn: Schema.Types.Mixed,
  STOSetByUser: Schema.Types.Mixed,
  STISetByUser: Schema.Types.Mixed,
  CTFlightNumber: Schema.Types.Mixed
}), 'STG2D0');

const STG2D1 = mongoose.model("STG2D1", new Schema ({
  recordStatus: Schema.Types.Mixed,
  lastDateModified: Schema.Types.Mixed,
  lastTimeModified: Schema.Types.Mixed,
  lastUserToModify: Schema.Types.Mixed,
  legDepartureDate: Schema.Types.Mixed,
  airlineCode: Schema.Types.Mixed,
  identifier: Schema.Types.Mixed,
  sequence: Schema.Types.Mixed,
  flightOriginDay: Schema.Types.Mixed,
  numericFlightDate: Schema.Types.Mixed,
  numGMTDate: Schema.Types.Mixed,
  STDudt: Schema.Types.Mixed,
  STAudt: Schema.Types.Mixed,
  tailNumber: Schema.Types.Mixed,
  numLastDateModified: Schema.Types.Mixed,
  flightStatus: Schema.Types.Mixed,
  origin: Schema.Types.Mixed,
  STDLocal: Schema.Types.Mixed,
  dispatchDesk: Schema.Types.Mixed,
  STDGMTVariance: Schema.Types.Mixed,
  destination: Schema.Types.Mixed,
  STALocal: Schema.Types.Mixed,
  STAGMTVariance: Schema.Types.Mixed,
  OAGEquipmentType: Schema.Types.Mixed,
  ACConfiguration: Schema.Types.Mixed,
  serviceType: Schema.Types.Mixed,
  originGate: Schema.Types.Mixed,
  ETDlocal: Schema.Types.Mixed,
  ETDudt: Schema.Types.Mixed,
  TAXIutc: Schema.Types.Mixed,
  OUTudt: Schema.Types.Mixed,
  OFFudt: Schema.Types.Mixed,
  destinationGate: Schema.Types.Mixed,
  ETAlocal: Schema.Types.Mixed,
  ETAudt: Schema.Types.Mixed,
  ONudt: Schema.Types.Mixed,
  INudt: Schema.Types.Mixed,
  previousTailNumber: Schema.Types.Mixed,
  ETE: Schema.Types.Mixed,
  DCNutc: Schema.Types.Mixed,
  ETOutc: Schema.Types.Mixed,
  EONutc: Schema.Types.Mixed,
  EDTCutc: Schema.Types.Mixed,
  flightType: Schema.Types.Mixed,
  newDepartureCity: Schema.Types.Mixed,
  newArrivalCity: Schema.Types.Mixed,
  SchedOAGEquipType: Schema.Types.Mixed,
  OAGEquipSubType: Schema.Types.Mixed,
  csvFSDailyID: Schema.Types.Mixed,
  tailNumBeforeCancel: Schema.Types.Mixed,
  CTAUTC: Schema.Types.Mixed,
  cancelled: Schema.Types.Mixed,
  replaced: Schema.Types.Mixed,
  ATCStatus: Schema.Types.Mixed,
  scheduledFlightType: Schema.Types.Mixed,
  aircraftRouting: Schema.Types.Mixed,
  mealService: Schema.Types.Mixed,
  hub: Schema.Types.Mixed,
  landingRestriction: Schema.Types.Mixed,
  headStartFlight: Schema.Types.Mixed,
  actualDeparture: Schema.Types.Mixed,
  specialFlight: Schema.Types.Mixed,
  actualArrival: Schema.Types.Mixed,
  scheduledTaxiOut: Schema.Types.Mixed,
  scheduledTaxiIn: Schema.Types.Mixed,
  STOSetByUser: Schema.Types.Mixed,
  STISetByUser: Schema.Types.Mixed,
  CTFlightNumber: Schema.Types.Mixed
}), 'STG2D1');

const STG2D2 = mongoose.model("STG2D2", new Schema ({
  recordStatus: Schema.Types.Mixed,
  lastDateModified: Schema.Types.Mixed,
  lastTimeModified: Schema.Types.Mixed,
  lastUserToModify: Schema.Types.Mixed,
  legDepartureDate: Schema.Types.Mixed,
  airlineCode: Schema.Types.Mixed,
  identifier: Schema.Types.Mixed,
  sequence: Schema.Types.Mixed,
  flightOriginDay: Schema.Types.Mixed,
  numericFlightDate: Schema.Types.Mixed,
  numGMTDate: Schema.Types.Mixed,
  STDudt: Schema.Types.Mixed,
  STAudt: Schema.Types.Mixed,
  tailNumber: Schema.Types.Mixed,
  numLastDateModified: Schema.Types.Mixed,
  flightStatus: Schema.Types.Mixed,
  origin: Schema.Types.Mixed,
  STDLocal: Schema.Types.Mixed,
  dispatchDesk: Schema.Types.Mixed,
  STDGMTVariance: Schema.Types.Mixed,
  destination: Schema.Types.Mixed,
  STALocal: Schema.Types.Mixed,
  STAGMTVariance: Schema.Types.Mixed,
  OAGEquipmentType: Schema.Types.Mixed,
  ACConfiguration: Schema.Types.Mixed,
  serviceType: Schema.Types.Mixed,
  originGate: Schema.Types.Mixed,
  ETDlocal: Schema.Types.Mixed,
  ETDudt: Schema.Types.Mixed,
  TAXIutc: Schema.Types.Mixed,
  OUTudt: Schema.Types.Mixed,
  OFFudt: Schema.Types.Mixed,
  destinationGate: Schema.Types.Mixed,
  ETAlocal: Schema.Types.Mixed,
  ETAudt: Schema.Types.Mixed,
  ONudt: Schema.Types.Mixed,
  INudt: Schema.Types.Mixed,
  previousTailNumber: Schema.Types.Mixed,
  ETE: Schema.Types.Mixed,
  DCNutc: Schema.Types.Mixed,
  ETOutc: Schema.Types.Mixed,
  EONutc: Schema.Types.Mixed,
  EDTCutc: Schema.Types.Mixed,
  flightType: Schema.Types.Mixed,
  newDepartureCity: Schema.Types.Mixed,
  newArrivalCity: Schema.Types.Mixed,
  SchedOAGEquipType: Schema.Types.Mixed,
  OAGEquipSubType: Schema.Types.Mixed,
  csvFSDailyID: Schema.Types.Mixed,
  tailNumBeforeCancel: Schema.Types.Mixed,
  CTAUTC: Schema.Types.Mixed,
  cancelled: Schema.Types.Mixed,
  replaced: Schema.Types.Mixed,
  ATCStatus: Schema.Types.Mixed,
  scheduledFlightType: Schema.Types.Mixed,
  aircraftRouting: Schema.Types.Mixed,
  mealService: Schema.Types.Mixed,
  hub: Schema.Types.Mixed,
  landingRestriction: Schema.Types.Mixed,
  headStartFlight: Schema.Types.Mixed,
  actualDeparture: Schema.Types.Mixed,
  specialFlight: Schema.Types.Mixed,
  actualArrival: Schema.Types.Mixed,
  scheduledTaxiOut: Schema.Types.Mixed,
  scheduledTaxiIn: Schema.Types.Mixed,
  STOSetByUser: Schema.Types.Mixed,
  STISetByUser: Schema.Types.Mixed,
  CTFlightNumber: Schema.Types.Mixed
}), 'STG2D2');

const STG2D3 = mongoose.model("STG2D3", new Schema ({
  recordStatus: Schema.Types.Mixed,
  lastDateModified: Schema.Types.Mixed,
  lastTimeModified: Schema.Types.Mixed,
  lastUserToModify: Schema.Types.Mixed,
  legDepartureDate: Schema.Types.Mixed,
  airlineCode: Schema.Types.Mixed,
  identifier: Schema.Types.Mixed,
  sequence: Schema.Types.Mixed,
  flightOriginDay: Schema.Types.Mixed,
  numericFlightDate: Schema.Types.Mixed,
  numGMTDate: Schema.Types.Mixed,
  STDudt: Schema.Types.Mixed,
  STAudt: Schema.Types.Mixed,
  tailNumber: Schema.Types.Mixed,
  numLastDateModified: Schema.Types.Mixed,
  flightStatus: Schema.Types.Mixed,
  origin: Schema.Types.Mixed,
  STDLocal: Schema.Types.Mixed,
  dispatchDesk: Schema.Types.Mixed,
  STDGMTVariance: Schema.Types.Mixed,
  destination: Schema.Types.Mixed,
  STALocal: Schema.Types.Mixed,
  STAGMTVariance: Schema.Types.Mixed,
  OAGEquipmentType: Schema.Types.Mixed,
  ACConfiguration: Schema.Types.Mixed,
  serviceType: Schema.Types.Mixed,
  originGate: Schema.Types.Mixed,
  ETDlocal: Schema.Types.Mixed,
  ETDudt: Schema.Types.Mixed,
  TAXIutc: Schema.Types.Mixed,
  OUTudt: Schema.Types.Mixed,
  OFFudt: Schema.Types.Mixed,
  destinationGate: Schema.Types.Mixed,
  ETAlocal: Schema.Types.Mixed,
  ETAudt: Schema.Types.Mixed,
  ONudt: Schema.Types.Mixed,
  INudt: Schema.Types.Mixed,
  previousTailNumber: Schema.Types.Mixed,
  ETE: Schema.Types.Mixed,
  DCNutc: Schema.Types.Mixed,
  ETOutc: Schema.Types.Mixed,
  EONutc: Schema.Types.Mixed,
  EDTCutc: Schema.Types.Mixed,
  flightType: Schema.Types.Mixed,
  newDepartureCity: Schema.Types.Mixed,
  newArrivalCity: Schema.Types.Mixed,
  SchedOAGEquipType: Schema.Types.Mixed,
  OAGEquipSubType: Schema.Types.Mixed,
  csvFSDailyID: Schema.Types.Mixed,
  tailNumBeforeCancel: Schema.Types.Mixed,
  CTAUTC: Schema.Types.Mixed,
  cancelled: Schema.Types.Mixed,
  replaced: Schema.Types.Mixed,
  ATCStatus: Schema.Types.Mixed,
  scheduledFlightType: Schema.Types.Mixed,
  aircraftRouting: Schema.Types.Mixed,
  mealService: Schema.Types.Mixed,
  hub: Schema.Types.Mixed,
  landingRestriction: Schema.Types.Mixed,
  headStartFlight: Schema.Types.Mixed,
  actualDeparture: Schema.Types.Mixed,
  specialFlight: Schema.Types.Mixed,
  actualArrival: Schema.Types.Mixed,
  scheduledTaxiOut: Schema.Types.Mixed,
  scheduledTaxiIn: Schema.Types.Mixed,
  STOSetByUser: Schema.Types.Mixed,
  STISetByUser: Schema.Types.Mixed,
  CTFlightNumber: Schema.Types.Mixed
}), 'STG2D3');

const STG2D4 = mongoose.model("STG2D4", new Schema ({
  recordStatus: Schema.Types.Mixed,
  lastDateModified: Schema.Types.Mixed,
  lastTimeModified: Schema.Types.Mixed,
  lastUserToModify: Schema.Types.Mixed,
  legDepartureDate: Schema.Types.Mixed,
  airlineCode: Schema.Types.Mixed,
  identifier: Schema.Types.Mixed,
  sequence: Schema.Types.Mixed,
  flightOriginDay: Schema.Types.Mixed,
  numericFlightDate: Schema.Types.Mixed,
  numGMTDate: Schema.Types.Mixed,
  STDudt: Schema.Types.Mixed,
  STAudt: Schema.Types.Mixed,
  tailNumber: Schema.Types.Mixed,
  numLastDateModified: Schema.Types.Mixed,
  flightStatus: Schema.Types.Mixed,
  origin: Schema.Types.Mixed,
  STDLocal: Schema.Types.Mixed,
  dispatchDesk: Schema.Types.Mixed,
  STDGMTVariance: Schema.Types.Mixed,
  destination: Schema.Types.Mixed,
  STALocal: Schema.Types.Mixed,
  STAGMTVariance: Schema.Types.Mixed,
  OAGEquipmentType: Schema.Types.Mixed,
  ACConfiguration: Schema.Types.Mixed,
  serviceType: Schema.Types.Mixed,
  originGate: Schema.Types.Mixed,
  ETDlocal: Schema.Types.Mixed,
  ETDudt: Schema.Types.Mixed,
  TAXIutc: Schema.Types.Mixed,
  OUTudt: Schema.Types.Mixed,
  OFFudt: Schema.Types.Mixed,
  destinationGate: Schema.Types.Mixed,
  ETAlocal: Schema.Types.Mixed,
  ETAudt: Schema.Types.Mixed,
  ONudt: Schema.Types.Mixed,
  INudt: Schema.Types.Mixed,
  previousTailNumber: Schema.Types.Mixed,
  ETE: Schema.Types.Mixed,
  DCNutc: Schema.Types.Mixed,
  ETOutc: Schema.Types.Mixed,
  EONutc: Schema.Types.Mixed,
  EDTCutc: Schema.Types.Mixed,
  flightType: Schema.Types.Mixed,
  newDepartureCity: Schema.Types.Mixed,
  newArrivalCity: Schema.Types.Mixed,
  SchedOAGEquipType: Schema.Types.Mixed,
  OAGEquipSubType: Schema.Types.Mixed,
  csvFSDailyID: Schema.Types.Mixed,
  tailNumBeforeCancel: Schema.Types.Mixed,
  CTAUTC: Schema.Types.Mixed,
  cancelled: Schema.Types.Mixed,
  replaced: Schema.Types.Mixed,
  ATCStatus: Schema.Types.Mixed,
  scheduledFlightType: Schema.Types.Mixed,
  aircraftRouting: Schema.Types.Mixed,
  mealService: Schema.Types.Mixed,
  hub: Schema.Types.Mixed,
  landingRestriction: Schema.Types.Mixed,
  headStartFlight: Schema.Types.Mixed,
  actualDeparture: Schema.Types.Mixed,
  specialFlight: Schema.Types.Mixed,
  actualArrival: Schema.Types.Mixed,
  scheduledTaxiOut: Schema.Types.Mixed,
  scheduledTaxiIn: Schema.Types.Mixed,
  STOSetByUser: Schema.Types.Mixed,
  STISetByUser: Schema.Types.Mixed,
  CTFlightNumber: Schema.Types.Mixed
}), 'STG2D4');

const STG2D5 = mongoose.model("STG2D5", new Schema ({
  recordStatus: Schema.Types.Mixed,
  lastDateModified: Schema.Types.Mixed,
  lastTimeModified: Schema.Types.Mixed,
  lastUserToModify: Schema.Types.Mixed,
  legDepartureDate: Schema.Types.Mixed,
  airlineCode: Schema.Types.Mixed,
  identifier: Schema.Types.Mixed,
  sequence: Schema.Types.Mixed,
  flightOriginDay: Schema.Types.Mixed,
  numericFlightDate: Schema.Types.Mixed,
  numGMTDate: Schema.Types.Mixed,
  STDudt: Schema.Types.Mixed,
  STAudt: Schema.Types.Mixed,
  tailNumber: Schema.Types.Mixed,
  numLastDateModified: Schema.Types.Mixed,
  flightStatus: Schema.Types.Mixed,
  origin: Schema.Types.Mixed,
  STDLocal: Schema.Types.Mixed,
  dispatchDesk: Schema.Types.Mixed,
  STDGMTVariance: Schema.Types.Mixed,
  destination: Schema.Types.Mixed,
  STALocal: Schema.Types.Mixed,
  STAGMTVariance: Schema.Types.Mixed,
  OAGEquipmentType: Schema.Types.Mixed,
  ACConfiguration: Schema.Types.Mixed,
  serviceType: Schema.Types.Mixed,
  originGate: Schema.Types.Mixed,
  ETDlocal: Schema.Types.Mixed,
  ETDudt: Schema.Types.Mixed,
  TAXIutc: Schema.Types.Mixed,
  OUTudt: Schema.Types.Mixed,
  OFFudt: Schema.Types.Mixed,
  destinationGate: Schema.Types.Mixed,
  ETAlocal: Schema.Types.Mixed,
  ETAudt: Schema.Types.Mixed,
  ONudt: Schema.Types.Mixed,
  INudt: Schema.Types.Mixed,
  previousTailNumber: Schema.Types.Mixed,
  ETE: Schema.Types.Mixed,
  DCNutc: Schema.Types.Mixed,
  ETOutc: Schema.Types.Mixed,
  EONutc: Schema.Types.Mixed,
  EDTCutc: Schema.Types.Mixed,
  flightType: Schema.Types.Mixed,
  newDepartureCity: Schema.Types.Mixed,
  newArrivalCity: Schema.Types.Mixed,
  SchedOAGEquipType: Schema.Types.Mixed,
  OAGEquipSubType: Schema.Types.Mixed,
  csvFSDailyID: Schema.Types.Mixed,
  tailNumBeforeCancel: Schema.Types.Mixed,
  CTAUTC: Schema.Types.Mixed,
  cancelled: Schema.Types.Mixed,
  replaced: Schema.Types.Mixed,
  ATCStatus: Schema.Types.Mixed,
  scheduledFlightType: Schema.Types.Mixed,
  aircraftRouting: Schema.Types.Mixed,
  mealService: Schema.Types.Mixed,
  hub: Schema.Types.Mixed,
  landingRestriction: Schema.Types.Mixed,
  headStartFlight: Schema.Types.Mixed,
  actualDeparture: Schema.Types.Mixed,
  specialFlight: Schema.Types.Mixed,
  actualArrival: Schema.Types.Mixed,
  scheduledTaxiOut: Schema.Types.Mixed,
  scheduledTaxiIn: Schema.Types.Mixed,
  STOSetByUser: Schema.Types.Mixed,
  STISetByUser: Schema.Types.Mixed,
  CTFlightNumber: Schema.Types.Mixed
}), 'STG2D5');

const STG2D6 = mongoose.model("STG2D6", new Schema ({
  recordStatus: Schema.Types.Mixed,
  lastDateModified: Schema.Types.Mixed,
  lastTimeModified: Schema.Types.Mixed,
  lastUserToModify: Schema.Types.Mixed,
  legDepartureDate: Schema.Types.Mixed,
  airlineCode: Schema.Types.Mixed,
  identifier: Schema.Types.Mixed,
  sequence: Schema.Types.Mixed,
  flightOriginDay: Schema.Types.Mixed,
  numericFlightDate: Schema.Types.Mixed,
  numGMTDate: Schema.Types.Mixed,
  STDudt: Schema.Types.Mixed,
  STAudt: Schema.Types.Mixed,
  tailNumber: Schema.Types.Mixed,
  numLastDateModified: Schema.Types.Mixed,
  flightStatus: Schema.Types.Mixed,
  origin: Schema.Types.Mixed,
  STDLocal: Schema.Types.Mixed,
  dispatchDesk: Schema.Types.Mixed,
  STDGMTVariance: Schema.Types.Mixed,
  destination: Schema.Types.Mixed,
  STALocal: Schema.Types.Mixed,
  STAGMTVariance: Schema.Types.Mixed,
  OAGEquipmentType: Schema.Types.Mixed,
  ACConfiguration: Schema.Types.Mixed,
  serviceType: Schema.Types.Mixed,
  originGate: Schema.Types.Mixed,
  ETDlocal: Schema.Types.Mixed,
  ETDudt: Schema.Types.Mixed,
  TAXIutc: Schema.Types.Mixed,
  OUTudt: Schema.Types.Mixed,
  OFFudt: Schema.Types.Mixed,
  destinationGate: Schema.Types.Mixed,
  ETAlocal: Schema.Types.Mixed,
  ETAudt: Schema.Types.Mixed,
  ONudt: Schema.Types.Mixed,
  INudt: Schema.Types.Mixed,
  previousTailNumber: Schema.Types.Mixed,
  ETE: Schema.Types.Mixed,
  DCNutc: Schema.Types.Mixed,
  ETOutc: Schema.Types.Mixed,
  EONutc: Schema.Types.Mixed,
  EDTCutc: Schema.Types.Mixed,
  flightType: Schema.Types.Mixed,
  newDepartureCity: Schema.Types.Mixed,
  newArrivalCity: Schema.Types.Mixed,
  SchedOAGEquipType: Schema.Types.Mixed,
  OAGEquipSubType: Schema.Types.Mixed,
  csvFSDailyID: Schema.Types.Mixed,
  tailNumBeforeCancel: Schema.Types.Mixed,
  CTAUTC: Schema.Types.Mixed,
  cancelled: Schema.Types.Mixed,
  replaced: Schema.Types.Mixed,
  ATCStatus: Schema.Types.Mixed,
  scheduledFlightType: Schema.Types.Mixed,
  aircraftRouting: Schema.Types.Mixed,
  mealService: Schema.Types.Mixed,
  hub: Schema.Types.Mixed,
  landingRestriction: Schema.Types.Mixed,
  headStartFlight: Schema.Types.Mixed,
  actualDeparture: Schema.Types.Mixed,
  specialFlight: Schema.Types.Mixed,
  actualArrival: Schema.Types.Mixed,
  scheduledTaxiOut: Schema.Types.Mixed,
  scheduledTaxiIn: Schema.Types.Mixed,
  STOSetByUser: Schema.Types.Mixed,
  STISetByUser: Schema.Types.Mixed,
  CTFlightNumber: Schema.Types.Mixed
}), 'STG2D6');

const STG2D7 = mongoose.model("STG2D7", new Schema ({
  recordStatus: Schema.Types.Mixed,
  lastDateModified: Schema.Types.Mixed,
  lastTimeModified: Schema.Types.Mixed,
  lastUserToModify: Schema.Types.Mixed,
  legDepartureDate: Schema.Types.Mixed,
  airlineCode: Schema.Types.Mixed,
  identifier: Schema.Types.Mixed,
  sequence: Schema.Types.Mixed,
  flightOriginDay: Schema.Types.Mixed,
  numericFlightDate: Schema.Types.Mixed,
  numGMTDate: Schema.Types.Mixed,
  STDudt: Schema.Types.Mixed,
  STAudt: Schema.Types.Mixed,
  tailNumber: Schema.Types.Mixed,
  numLastDateModified: Schema.Types.Mixed,
  flightStatus: Schema.Types.Mixed,
  origin: Schema.Types.Mixed,
  STDLocal: Schema.Types.Mixed,
  dispatchDesk: Schema.Types.Mixed,
  STDGMTVariance: Schema.Types.Mixed,
  destination: Schema.Types.Mixed,
  STALocal: Schema.Types.Mixed,
  STAGMTVariance: Schema.Types.Mixed,
  OAGEquipmentType: Schema.Types.Mixed,
  ACConfiguration: Schema.Types.Mixed,
  serviceType: Schema.Types.Mixed,
  originGate: Schema.Types.Mixed,
  ETDlocal: Schema.Types.Mixed,
  ETDudt: Schema.Types.Mixed,
  TAXIutc: Schema.Types.Mixed,
  OUTudt: Schema.Types.Mixed,
  OFFudt: Schema.Types.Mixed,
  destinationGate: Schema.Types.Mixed,
  ETAlocal: Schema.Types.Mixed,
  ETAudt: Schema.Types.Mixed,
  ONudt: Schema.Types.Mixed,
  INudt: Schema.Types.Mixed,
  previousTailNumber: Schema.Types.Mixed,
  ETE: Schema.Types.Mixed,
  DCNutc: Schema.Types.Mixed,
  ETOutc: Schema.Types.Mixed,
  EONutc: Schema.Types.Mixed,
  EDTCutc: Schema.Types.Mixed,
  flightType: Schema.Types.Mixed,
  newDepartureCity: Schema.Types.Mixed,
  newArrivalCity: Schema.Types.Mixed,
  SchedOAGEquipType: Schema.Types.Mixed,
  OAGEquipSubType: Schema.Types.Mixed,
  csvFSDailyID: Schema.Types.Mixed,
  tailNumBeforeCancel: Schema.Types.Mixed,
  CTAUTC: Schema.Types.Mixed,
  cancelled: Schema.Types.Mixed,
  replaced: Schema.Types.Mixed,
  ATCStatus: Schema.Types.Mixed,
  scheduledFlightType: Schema.Types.Mixed,
  aircraftRouting: Schema.Types.Mixed,
  mealService: Schema.Types.Mixed,
  hub: Schema.Types.Mixed,
  landingRestriction: Schema.Types.Mixed,
  headStartFlight: Schema.Types.Mixed,
  actualDeparture: Schema.Types.Mixed,
  specialFlight: Schema.Types.Mixed,
  actualArrival: Schema.Types.Mixed,
  scheduledTaxiOut: Schema.Types.Mixed,
  scheduledTaxiIn: Schema.Types.Mixed,
  STOSetByUser: Schema.Types.Mixed,
  STISetByUser: Schema.Types.Mixed,
  CTFlightNumber: Schema.Types.Mixed
}), 'STG2D7');

//  Stage 3

const STG3D0 = mongoose.model("STG3D0", new Schema ({
  recordStatus: Schema.Types.Mixed,
  lastDateModified: Schema.Types.Mixed,
  lastTimeModified: Schema.Types.Mixed,
  lastUserToModify: Schema.Types.Mixed,
  legDepartureDate: Schema.Types.Mixed,
  airlineCode: Schema.Types.Mixed,
  identifier: Schema.Types.Mixed,
  sequence: Schema.Types.Mixed,
  flightOriginDay: Schema.Types.Mixed,
  numericFlightDate: Schema.Types.Mixed,
  numGMTDate: Schema.Types.Mixed,
  STDudt: Schema.Types.Mixed,
  STAudt: Schema.Types.Mixed,
  tailNumber: Schema.Types.Mixed,
  numLastDateModified: Schema.Types.Mixed,
  flightStatus: Schema.Types.Mixed,
  origin: Schema.Types.Mixed,
  STDLocal: Schema.Types.Mixed,
  dispatchDesk: Schema.Types.Mixed,
  STDGMTVariance: Schema.Types.Mixed,
  destination: Schema.Types.Mixed,
  STALocal: Schema.Types.Mixed,
  STAGMTVariance: Schema.Types.Mixed,
  OAGEquipmentType: Schema.Types.Mixed,
  ACConfiguration: Schema.Types.Mixed,
  serviceType: Schema.Types.Mixed,
  originGate: Schema.Types.Mixed,
  ETDlocal: Schema.Types.Mixed,
  ETDudt: Schema.Types.Mixed,
  TAXIutc: Schema.Types.Mixed,
  OUTudt: Schema.Types.Mixed,
  OFFudt: Schema.Types.Mixed,
  destinationGate: Schema.Types.Mixed,
  ETAlocal: Schema.Types.Mixed,
  ETAudt: Schema.Types.Mixed,
  ONudt: Schema.Types.Mixed,
  INudt: Schema.Types.Mixed,
  previousTailNumber: Schema.Types.Mixed,
  ETE: Schema.Types.Mixed,
  DCNutc: Schema.Types.Mixed,
  ETOutc: Schema.Types.Mixed,
  EONutc: Schema.Types.Mixed,
  EDTCutc: Schema.Types.Mixed,
  flightType: Schema.Types.Mixed,
  newDepartureCity: Schema.Types.Mixed,
  newArrivalCity: Schema.Types.Mixed,
  SchedOAGEquipType: Schema.Types.Mixed,
  OAGEquipSubType: Schema.Types.Mixed,
  csvFSDailyID: Schema.Types.Mixed,
  tailNumBeforeCancel: Schema.Types.Mixed,
  CTAUTC: Schema.Types.Mixed,
  cancelled: Schema.Types.Mixed,
  replaced: Schema.Types.Mixed,
  ATCStatus: Schema.Types.Mixed,
  scheduledFlightType: Schema.Types.Mixed,
  aircraftRouting: Schema.Types.Mixed,
  mealService: Schema.Types.Mixed,
  hub: Schema.Types.Mixed,
  landingRestriction: Schema.Types.Mixed,
  headStartFlight: Schema.Types.Mixed,
  actualDeparture: Schema.Types.Mixed,
  specialFlight: Schema.Types.Mixed,
  actualArrival: Schema.Types.Mixed,
  scheduledTaxiOut: Schema.Types.Mixed,
  scheduledTaxiIn: Schema.Types.Mixed,
  STOSetByUser: Schema.Types.Mixed,
  STISetByUser: Schema.Types.Mixed,
  CTFlightNumber: Schema.Types.Mixed
}), 'STG3D0');

const STG3D1 = mongoose.model("STG3D1", new Schema ({
  recordStatus: Schema.Types.Mixed,
  lastDateModified: Schema.Types.Mixed,
  lastTimeModified: Schema.Types.Mixed,
  lastUserToModify: Schema.Types.Mixed,
  legDepartureDate: Schema.Types.Mixed,
  airlineCode: Schema.Types.Mixed,
  identifier: Schema.Types.Mixed,
  sequence: Schema.Types.Mixed,
  flightOriginDay: Schema.Types.Mixed,
  numericFlightDate: Schema.Types.Mixed,
  numGMTDate: Schema.Types.Mixed,
  STDudt: Schema.Types.Mixed,
  STAudt: Schema.Types.Mixed,
  tailNumber: Schema.Types.Mixed,
  numLastDateModified: Schema.Types.Mixed,
  flightStatus: Schema.Types.Mixed,
  origin: Schema.Types.Mixed,
  STDLocal: Schema.Types.Mixed,
  dispatchDesk: Schema.Types.Mixed,
  STDGMTVariance: Schema.Types.Mixed,
  destination: Schema.Types.Mixed,
  STALocal: Schema.Types.Mixed,
  STAGMTVariance: Schema.Types.Mixed,
  OAGEquipmentType: Schema.Types.Mixed,
  ACConfiguration: Schema.Types.Mixed,
  serviceType: Schema.Types.Mixed,
  originGate: Schema.Types.Mixed,
  ETDlocal: Schema.Types.Mixed,
  ETDudt: Schema.Types.Mixed,
  TAXIutc: Schema.Types.Mixed,
  OUTudt: Schema.Types.Mixed,
  OFFudt: Schema.Types.Mixed,
  destinationGate: Schema.Types.Mixed,
  ETAlocal: Schema.Types.Mixed,
  ETAudt: Schema.Types.Mixed,
  ONudt: Schema.Types.Mixed,
  INudt: Schema.Types.Mixed,
  previousTailNumber: Schema.Types.Mixed,
  ETE: Schema.Types.Mixed,
  DCNutc: Schema.Types.Mixed,
  ETOutc: Schema.Types.Mixed,
  EONutc: Schema.Types.Mixed,
  EDTCutc: Schema.Types.Mixed,
  flightType: Schema.Types.Mixed,
  newDepartureCity: Schema.Types.Mixed,
  newArrivalCity: Schema.Types.Mixed,
  SchedOAGEquipType: Schema.Types.Mixed,
  OAGEquipSubType: Schema.Types.Mixed,
  csvFSDailyID: Schema.Types.Mixed,
  tailNumBeforeCancel: Schema.Types.Mixed,
  CTAUTC: Schema.Types.Mixed,
  cancelled: Schema.Types.Mixed,
  replaced: Schema.Types.Mixed,
  ATCStatus: Schema.Types.Mixed,
  scheduledFlightType: Schema.Types.Mixed,
  aircraftRouting: Schema.Types.Mixed,
  mealService: Schema.Types.Mixed,
  hub: Schema.Types.Mixed,
  landingRestriction: Schema.Types.Mixed,
  headStartFlight: Schema.Types.Mixed,
  actualDeparture: Schema.Types.Mixed,
  specialFlight: Schema.Types.Mixed,
  actualArrival: Schema.Types.Mixed,
  scheduledTaxiOut: Schema.Types.Mixed,
  scheduledTaxiIn: Schema.Types.Mixed,
  STOSetByUser: Schema.Types.Mixed,
  STISetByUser: Schema.Types.Mixed,
  CTFlightNumber: Schema.Types.Mixed
}), 'STG3D1');

const STG3D2 = mongoose.model("STG3D2", new Schema ({
  recordStatus: Schema.Types.Mixed,
  lastDateModified: Schema.Types.Mixed,
  lastTimeModified: Schema.Types.Mixed,
  lastUserToModify: Schema.Types.Mixed,
  legDepartureDate: Schema.Types.Mixed,
  airlineCode: Schema.Types.Mixed,
  identifier: Schema.Types.Mixed,
  sequence: Schema.Types.Mixed,
  flightOriginDay: Schema.Types.Mixed,
  numericFlightDate: Schema.Types.Mixed,
  numGMTDate: Schema.Types.Mixed,
  STDudt: Schema.Types.Mixed,
  STAudt: Schema.Types.Mixed,
  tailNumber: Schema.Types.Mixed,
  numLastDateModified: Schema.Types.Mixed,
  flightStatus: Schema.Types.Mixed,
  origin: Schema.Types.Mixed,
  STDLocal: Schema.Types.Mixed,
  dispatchDesk: Schema.Types.Mixed,
  STDGMTVariance: Schema.Types.Mixed,
  destination: Schema.Types.Mixed,
  STALocal: Schema.Types.Mixed,
  STAGMTVariance: Schema.Types.Mixed,
  OAGEquipmentType: Schema.Types.Mixed,
  ACConfiguration: Schema.Types.Mixed,
  serviceType: Schema.Types.Mixed,
  originGate: Schema.Types.Mixed,
  ETDlocal: Schema.Types.Mixed,
  ETDudt: Schema.Types.Mixed,
  TAXIutc: Schema.Types.Mixed,
  OUTudt: Schema.Types.Mixed,
  OFFudt: Schema.Types.Mixed,
  destinationGate: Schema.Types.Mixed,
  ETAlocal: Schema.Types.Mixed,
  ETAudt: Schema.Types.Mixed,
  ONudt: Schema.Types.Mixed,
  INudt: Schema.Types.Mixed,
  previousTailNumber: Schema.Types.Mixed,
  ETE: Schema.Types.Mixed,
  DCNutc: Schema.Types.Mixed,
  ETOutc: Schema.Types.Mixed,
  EONutc: Schema.Types.Mixed,
  EDTCutc: Schema.Types.Mixed,
  flightType: Schema.Types.Mixed,
  newDepartureCity: Schema.Types.Mixed,
  newArrivalCity: Schema.Types.Mixed,
  SchedOAGEquipType: Schema.Types.Mixed,
  OAGEquipSubType: Schema.Types.Mixed,
  csvFSDailyID: Schema.Types.Mixed,
  tailNumBeforeCancel: Schema.Types.Mixed,
  CTAUTC: Schema.Types.Mixed,
  cancelled: Schema.Types.Mixed,
  replaced: Schema.Types.Mixed,
  ATCStatus: Schema.Types.Mixed,
  scheduledFlightType: Schema.Types.Mixed,
  aircraftRouting: Schema.Types.Mixed,
  mealService: Schema.Types.Mixed,
  hub: Schema.Types.Mixed,
  landingRestriction: Schema.Types.Mixed,
  headStartFlight: Schema.Types.Mixed,
  actualDeparture: Schema.Types.Mixed,
  specialFlight: Schema.Types.Mixed,
  actualArrival: Schema.Types.Mixed,
  scheduledTaxiOut: Schema.Types.Mixed,
  scheduledTaxiIn: Schema.Types.Mixed,
  STOSetByUser: Schema.Types.Mixed,
  STISetByUser: Schema.Types.Mixed,
  CTFlightNumber: Schema.Types.Mixed
}), 'STG3D2');

const STG3D3 = mongoose.model("STG3D3", new Schema ({
  recordStatus: Schema.Types.Mixed,
  lastDateModified: Schema.Types.Mixed,
  lastTimeModified: Schema.Types.Mixed,
  lastUserToModify: Schema.Types.Mixed,
  legDepartureDate: Schema.Types.Mixed,
  airlineCode: Schema.Types.Mixed,
  identifier: Schema.Types.Mixed,
  sequence: Schema.Types.Mixed,
  flightOriginDay: Schema.Types.Mixed,
  numericFlightDate: Schema.Types.Mixed,
  numGMTDate: Schema.Types.Mixed,
  STDudt: Schema.Types.Mixed,
  STAudt: Schema.Types.Mixed,
  tailNumber: Schema.Types.Mixed,
  numLastDateModified: Schema.Types.Mixed,
  flightStatus: Schema.Types.Mixed,
  origin: Schema.Types.Mixed,
  STDLocal: Schema.Types.Mixed,
  dispatchDesk: Schema.Types.Mixed,
  STDGMTVariance: Schema.Types.Mixed,
  destination: Schema.Types.Mixed,
  STALocal: Schema.Types.Mixed,
  STAGMTVariance: Schema.Types.Mixed,
  OAGEquipmentType: Schema.Types.Mixed,
  ACConfiguration: Schema.Types.Mixed,
  serviceType: Schema.Types.Mixed,
  originGate: Schema.Types.Mixed,
  ETDlocal: Schema.Types.Mixed,
  ETDudt: Schema.Types.Mixed,
  TAXIutc: Schema.Types.Mixed,
  OUTudt: Schema.Types.Mixed,
  OFFudt: Schema.Types.Mixed,
  destinationGate: Schema.Types.Mixed,
  ETAlocal: Schema.Types.Mixed,
  ETAudt: Schema.Types.Mixed,
  ONudt: Schema.Types.Mixed,
  INudt: Schema.Types.Mixed,
  previousTailNumber: Schema.Types.Mixed,
  ETE: Schema.Types.Mixed,
  DCNutc: Schema.Types.Mixed,
  ETOutc: Schema.Types.Mixed,
  EONutc: Schema.Types.Mixed,
  EDTCutc: Schema.Types.Mixed,
  flightType: Schema.Types.Mixed,
  newDepartureCity: Schema.Types.Mixed,
  newArrivalCity: Schema.Types.Mixed,
  SchedOAGEquipType: Schema.Types.Mixed,
  OAGEquipSubType: Schema.Types.Mixed,
  csvFSDailyID: Schema.Types.Mixed,
  tailNumBeforeCancel: Schema.Types.Mixed,
  CTAUTC: Schema.Types.Mixed,
  cancelled: Schema.Types.Mixed,
  replaced: Schema.Types.Mixed,
  ATCStatus: Schema.Types.Mixed,
  scheduledFlightType: Schema.Types.Mixed,
  aircraftRouting: Schema.Types.Mixed,
  mealService: Schema.Types.Mixed,
  hub: Schema.Types.Mixed,
  landingRestriction: Schema.Types.Mixed,
  headStartFlight: Schema.Types.Mixed,
  actualDeparture: Schema.Types.Mixed,
  specialFlight: Schema.Types.Mixed,
  actualArrival: Schema.Types.Mixed,
  scheduledTaxiOut: Schema.Types.Mixed,
  scheduledTaxiIn: Schema.Types.Mixed,
  STOSetByUser: Schema.Types.Mixed,
  STISetByUser: Schema.Types.Mixed,
  CTFlightNumber: Schema.Types.Mixed
}), 'STG3D3');

const STG3D4 = mongoose.model("STG3D4", new Schema ({
  recordStatus: Schema.Types.Mixed,
  lastDateModified: Schema.Types.Mixed,
  lastTimeModified: Schema.Types.Mixed,
  lastUserToModify: Schema.Types.Mixed,
  legDepartureDate: Schema.Types.Mixed,
  airlineCode: Schema.Types.Mixed,
  identifier: Schema.Types.Mixed,
  sequence: Schema.Types.Mixed,
  flightOriginDay: Schema.Types.Mixed,
  numericFlightDate: Schema.Types.Mixed,
  numGMTDate: Schema.Types.Mixed,
  STDudt: Schema.Types.Mixed,
  STAudt: Schema.Types.Mixed,
  tailNumber: Schema.Types.Mixed,
  numLastDateModified: Schema.Types.Mixed,
  flightStatus: Schema.Types.Mixed,
  origin: Schema.Types.Mixed,
  STDLocal: Schema.Types.Mixed,
  dispatchDesk: Schema.Types.Mixed,
  STDGMTVariance: Schema.Types.Mixed,
  destination: Schema.Types.Mixed,
  STALocal: Schema.Types.Mixed,
  STAGMTVariance: Schema.Types.Mixed,
  OAGEquipmentType: Schema.Types.Mixed,
  ACConfiguration: Schema.Types.Mixed,
  serviceType: Schema.Types.Mixed,
  originGate: Schema.Types.Mixed,
  ETDlocal: Schema.Types.Mixed,
  ETDudt: Schema.Types.Mixed,
  TAXIutc: Schema.Types.Mixed,
  OUTudt: Schema.Types.Mixed,
  OFFudt: Schema.Types.Mixed,
  destinationGate: Schema.Types.Mixed,
  ETAlocal: Schema.Types.Mixed,
  ETAudt: Schema.Types.Mixed,
  ONudt: Schema.Types.Mixed,
  INudt: Schema.Types.Mixed,
  previousTailNumber: Schema.Types.Mixed,
  ETE: Schema.Types.Mixed,
  DCNutc: Schema.Types.Mixed,
  ETOutc: Schema.Types.Mixed,
  EONutc: Schema.Types.Mixed,
  EDTCutc: Schema.Types.Mixed,
  flightType: Schema.Types.Mixed,
  newDepartureCity: Schema.Types.Mixed,
  newArrivalCity: Schema.Types.Mixed,
  SchedOAGEquipType: Schema.Types.Mixed,
  OAGEquipSubType: Schema.Types.Mixed,
  csvFSDailyID: Schema.Types.Mixed,
  tailNumBeforeCancel: Schema.Types.Mixed,
  CTAUTC: Schema.Types.Mixed,
  cancelled: Schema.Types.Mixed,
  replaced: Schema.Types.Mixed,
  ATCStatus: Schema.Types.Mixed,
  scheduledFlightType: Schema.Types.Mixed,
  aircraftRouting: Schema.Types.Mixed,
  mealService: Schema.Types.Mixed,
  hub: Schema.Types.Mixed,
  landingRestriction: Schema.Types.Mixed,
  headStartFlight: Schema.Types.Mixed,
  actualDeparture: Schema.Types.Mixed,
  specialFlight: Schema.Types.Mixed,
  actualArrival: Schema.Types.Mixed,
  scheduledTaxiOut: Schema.Types.Mixed,
  scheduledTaxiIn: Schema.Types.Mixed,
  STOSetByUser: Schema.Types.Mixed,
  STISetByUser: Schema.Types.Mixed,
  CTFlightNumber: Schema.Types.Mixed
}), 'STG3D4');

const STG3D5 = mongoose.model("STG3D5", new Schema ({
  recordStatus: Schema.Types.Mixed,
  lastDateModified: Schema.Types.Mixed,
  lastTimeModified: Schema.Types.Mixed,
  lastUserToModify: Schema.Types.Mixed,
  legDepartureDate: Schema.Types.Mixed,
  airlineCode: Schema.Types.Mixed,
  identifier: Schema.Types.Mixed,
  sequence: Schema.Types.Mixed,
  flightOriginDay: Schema.Types.Mixed,
  numericFlightDate: Schema.Types.Mixed,
  numGMTDate: Schema.Types.Mixed,
  STDudt: Schema.Types.Mixed,
  STAudt: Schema.Types.Mixed,
  tailNumber: Schema.Types.Mixed,
  numLastDateModified: Schema.Types.Mixed,
  flightStatus: Schema.Types.Mixed,
  origin: Schema.Types.Mixed,
  STDLocal: Schema.Types.Mixed,
  dispatchDesk: Schema.Types.Mixed,
  STDGMTVariance: Schema.Types.Mixed,
  destination: Schema.Types.Mixed,
  STALocal: Schema.Types.Mixed,
  STAGMTVariance: Schema.Types.Mixed,
  OAGEquipmentType: Schema.Types.Mixed,
  ACConfiguration: Schema.Types.Mixed,
  serviceType: Schema.Types.Mixed,
  originGate: Schema.Types.Mixed,
  ETDlocal: Schema.Types.Mixed,
  ETDudt: Schema.Types.Mixed,
  TAXIutc: Schema.Types.Mixed,
  OUTudt: Schema.Types.Mixed,
  OFFudt: Schema.Types.Mixed,
  destinationGate: Schema.Types.Mixed,
  ETAlocal: Schema.Types.Mixed,
  ETAudt: Schema.Types.Mixed,
  ONudt: Schema.Types.Mixed,
  INudt: Schema.Types.Mixed,
  previousTailNumber: Schema.Types.Mixed,
  ETE: Schema.Types.Mixed,
  DCNutc: Schema.Types.Mixed,
  ETOutc: Schema.Types.Mixed,
  EONutc: Schema.Types.Mixed,
  EDTCutc: Schema.Types.Mixed,
  flightType: Schema.Types.Mixed,
  newDepartureCity: Schema.Types.Mixed,
  newArrivalCity: Schema.Types.Mixed,
  SchedOAGEquipType: Schema.Types.Mixed,
  OAGEquipSubType: Schema.Types.Mixed,
  csvFSDailyID: Schema.Types.Mixed,
  tailNumBeforeCancel: Schema.Types.Mixed,
  CTAUTC: Schema.Types.Mixed,
  cancelled: Schema.Types.Mixed,
  replaced: Schema.Types.Mixed,
  ATCStatus: Schema.Types.Mixed,
  scheduledFlightType: Schema.Types.Mixed,
  aircraftRouting: Schema.Types.Mixed,
  mealService: Schema.Types.Mixed,
  hub: Schema.Types.Mixed,
  landingRestriction: Schema.Types.Mixed,
  headStartFlight: Schema.Types.Mixed,
  actualDeparture: Schema.Types.Mixed,
  specialFlight: Schema.Types.Mixed,
  actualArrival: Schema.Types.Mixed,
  scheduledTaxiOut: Schema.Types.Mixed,
  scheduledTaxiIn: Schema.Types.Mixed,
  STOSetByUser: Schema.Types.Mixed,
  STISetByUser: Schema.Types.Mixed,
  CTFlightNumber: Schema.Types.Mixed
}), 'STG3D5');

const STG3D6 = mongoose.model("STG3D6", new Schema ({
  recordStatus: Schema.Types.Mixed,
  lastDateModified: Schema.Types.Mixed,
  lastTimeModified: Schema.Types.Mixed,
  lastUserToModify: Schema.Types.Mixed,
  legDepartureDate: Schema.Types.Mixed,
  airlineCode: Schema.Types.Mixed,
  identifier: Schema.Types.Mixed,
  sequence: Schema.Types.Mixed,
  flightOriginDay: Schema.Types.Mixed,
  numericFlightDate: Schema.Types.Mixed,
  numGMTDate: Schema.Types.Mixed,
  STDudt: Schema.Types.Mixed,
  STAudt: Schema.Types.Mixed,
  tailNumber: Schema.Types.Mixed,
  numLastDateModified: Schema.Types.Mixed,
  flightStatus: Schema.Types.Mixed,
  origin: Schema.Types.Mixed,
  STDLocal: Schema.Types.Mixed,
  dispatchDesk: Schema.Types.Mixed,
  STDGMTVariance: Schema.Types.Mixed,
  destination: Schema.Types.Mixed,
  STALocal: Schema.Types.Mixed,
  STAGMTVariance: Schema.Types.Mixed,
  OAGEquipmentType: Schema.Types.Mixed,
  ACConfiguration: Schema.Types.Mixed,
  serviceType: Schema.Types.Mixed,
  originGate: Schema.Types.Mixed,
  ETDlocal: Schema.Types.Mixed,
  ETDudt: Schema.Types.Mixed,
  TAXIutc: Schema.Types.Mixed,
  OUTudt: Schema.Types.Mixed,
  OFFudt: Schema.Types.Mixed,
  destinationGate: Schema.Types.Mixed,
  ETAlocal: Schema.Types.Mixed,
  ETAudt: Schema.Types.Mixed,
  ONudt: Schema.Types.Mixed,
  INudt: Schema.Types.Mixed,
  previousTailNumber: Schema.Types.Mixed,
  ETE: Schema.Types.Mixed,
  DCNutc: Schema.Types.Mixed,
  ETOutc: Schema.Types.Mixed,
  EONutc: Schema.Types.Mixed,
  EDTCutc: Schema.Types.Mixed,
  flightType: Schema.Types.Mixed,
  newDepartureCity: Schema.Types.Mixed,
  newArrivalCity: Schema.Types.Mixed,
  SchedOAGEquipType: Schema.Types.Mixed,
  OAGEquipSubType: Schema.Types.Mixed,
  csvFSDailyID: Schema.Types.Mixed,
  tailNumBeforeCancel: Schema.Types.Mixed,
  CTAUTC: Schema.Types.Mixed,
  cancelled: Schema.Types.Mixed,
  replaced: Schema.Types.Mixed,
  ATCStatus: Schema.Types.Mixed,
  scheduledFlightType: Schema.Types.Mixed,
  aircraftRouting: Schema.Types.Mixed,
  mealService: Schema.Types.Mixed,
  hub: Schema.Types.Mixed,
  landingRestriction: Schema.Types.Mixed,
  headStartFlight: Schema.Types.Mixed,
  actualDeparture: Schema.Types.Mixed,
  specialFlight: Schema.Types.Mixed,
  actualArrival: Schema.Types.Mixed,
  scheduledTaxiOut: Schema.Types.Mixed,
  scheduledTaxiIn: Schema.Types.Mixed,
  STOSetByUser: Schema.Types.Mixed,
  STISetByUser: Schema.Types.Mixed,
  CTFlightNumber: Schema.Types.Mixed
}), 'STG3D6');

const STG3D7 = mongoose.model("STG3D7", new Schema ({
  recordStatus: Schema.Types.Mixed,
  lastDateModified: Schema.Types.Mixed,
  lastTimeModified: Schema.Types.Mixed,
  lastUserToModify: Schema.Types.Mixed,
  legDepartureDate: Schema.Types.Mixed,
  airlineCode: Schema.Types.Mixed,
  identifier: Schema.Types.Mixed,
  sequence: Schema.Types.Mixed,
  flightOriginDay: Schema.Types.Mixed,
  numericFlightDate: Schema.Types.Mixed,
  numGMTDate: Schema.Types.Mixed,
  STDudt: Schema.Types.Mixed,
  STAudt: Schema.Types.Mixed,
  tailNumber: Schema.Types.Mixed,
  numLastDateModified: Schema.Types.Mixed,
  flightStatus: Schema.Types.Mixed,
  origin: Schema.Types.Mixed,
  STDLocal: Schema.Types.Mixed,
  dispatchDesk: Schema.Types.Mixed,
  STDGMTVariance: Schema.Types.Mixed,
  destination: Schema.Types.Mixed,
  STALocal: Schema.Types.Mixed,
  STAGMTVariance: Schema.Types.Mixed,
  OAGEquipmentType: Schema.Types.Mixed,
  ACConfiguration: Schema.Types.Mixed,
  serviceType: Schema.Types.Mixed,
  originGate: Schema.Types.Mixed,
  ETDlocal: Schema.Types.Mixed,
  ETDudt: Schema.Types.Mixed,
  TAXIutc: Schema.Types.Mixed,
  OUTudt: Schema.Types.Mixed,
  OFFudt: Schema.Types.Mixed,
  destinationGate: Schema.Types.Mixed,
  ETAlocal: Schema.Types.Mixed,
  ETAudt: Schema.Types.Mixed,
  ONudt: Schema.Types.Mixed,
  INudt: Schema.Types.Mixed,
  previousTailNumber: Schema.Types.Mixed,
  ETE: Schema.Types.Mixed,
  DCNutc: Schema.Types.Mixed,
  ETOutc: Schema.Types.Mixed,
  EONutc: Schema.Types.Mixed,
  EDTCutc: Schema.Types.Mixed,
  flightType: Schema.Types.Mixed,
  newDepartureCity: Schema.Types.Mixed,
  newArrivalCity: Schema.Types.Mixed,
  SchedOAGEquipType: Schema.Types.Mixed,
  OAGEquipSubType: Schema.Types.Mixed,
  csvFSDailyID: Schema.Types.Mixed,
  tailNumBeforeCancel: Schema.Types.Mixed,
  CTAUTC: Schema.Types.Mixed,
  cancelled: Schema.Types.Mixed,
  replaced: Schema.Types.Mixed,
  ATCStatus: Schema.Types.Mixed,
  scheduledFlightType: Schema.Types.Mixed,
  aircraftRouting: Schema.Types.Mixed,
  mealService: Schema.Types.Mixed,
  hub: Schema.Types.Mixed,
  landingRestriction: Schema.Types.Mixed,
  headStartFlight: Schema.Types.Mixed,
  actualDeparture: Schema.Types.Mixed,
  specialFlight: Schema.Types.Mixed,
  actualArrival: Schema.Types.Mixed,
  scheduledTaxiOut: Schema.Types.Mixed,
  scheduledTaxiIn: Schema.Types.Mixed,
  STOSetByUser: Schema.Types.Mixed,
  STISetByUser: Schema.Types.Mixed,
  CTFlightNumber: Schema.Types.Mixed
}), 'STG3D7');

module.exports = {
  STG1D0,
  STG1D1,
  STG1D2,
  STG1D3,
  STG1D4,
  STG1D5,
  STG1D6,
  STG1D7,
  STG2D0,
  STG2D1,
  STG2D2,
  STG2D3,
  STG2D4,
  STG2D5,
  STG2D6,
  STG2D7,
  STG3D0,
  STG3D1,
  STG3D2,
  STG3D3,
  STG3D4,
  STG3D5,
  STG3D6,
  STG3D7 };
