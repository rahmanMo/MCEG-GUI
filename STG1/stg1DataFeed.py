#!python 3.6.2 or greater
# import all necessary packages
import datetime, csv, os, shutil, time, fnmatch, sys, json
import glob
from pathlib import Path
import traceback
from collections import OrderedDict
import pandas as pd
import pymongo
from apscheduler.schedulers.blocking import BlockingScheduler

##################################################################################################################
############################################# STG1 Day 0 (yesterday) ############################################
def STG1D0_job():
    print('Starting Stage 1 day 0 data feed.')
    # mlab remote mongodb location
    uri = 'mongodb://0.0.0.0:27017/'

    # request drop location
    stageSend = Path('/mnt/gcsfile01/STG1/adh_receive')

    # response file location
    stageReceive = Path('/mnt/gcsfile01/STG1/adh_send')

    # current directory
    currentDirectory = Path(os.getcwd())

    # it is assumed that all flight origin date is the current day this script is running
    # extracting cuurent date in format DDMMMYY
    currentDay = (datetime.datetime.now() + datetime.timedelta(days=-1)).strftime("%d")
    currentMonth = (datetime.datetime.now() + datetime.timedelta(days=-1)).strftime("%b").upper()
    currentYear = (datetime.datetime.now() + datetime.timedelta(days=-1)).strftime("%y")
    currentDate = f'{currentDay}{currentMonth}{currentYear}'
    # currentDate = '18APR18'

    # ############################## functions ##########################

    # Check if adhoc folders are visible from the current machine
    def check_if_folder_exist(location):
        if os.path.exists(location):
            print(f'[ {location} ] folder found')
        else:
            print(f'Could not find [ {location} ] folder!')
            print(f'make sure [ {location} ] is available from this machine!')
            sys.exit("Stopping script .......")



    # check for response csv, if exist copy to current directory for parsing
    def call_adhoc_4_and_check_for_response_csv(receive_folder, send_folder, local_directory, current_date):
        # note that repeat is needed since the adhoc processor sometimes does not return csv.
        # get current timestamp
        sendPattern = f'MCEG_STG1D0*.txt'
        timeStamp = datetime.datetime.now().strftime("%Y%m%d%H%M%S")
        sentFiles = os.listdir(send_folder)
        if fnmatch.filter(sentFiles, sendPattern):
          print('There are request files waiting on que, adhoc processor may be down')
        else:
          request_file = open(f'{send_folder}/MCEG_STG1D0_ADHOC4_{timeStamp}.txt', 'w')
          request_file.write(f'ADH004_{current_date}')
          adh004String = f'ADH004_{current_date}'
          request_file.close()
          print(f' Sending adhoc 4 request using: {adh004String}')
          time.sleep(25)
        # check if the file exist
        receivedFiles = os.listdir(receive_folder)
        receivePattern = f'MCEG_STG1D0_ADHOC4_{timeStamp}*.csv'
        # for file in os.listdir(receive_folder):
        # if fnmatch.fnmatch(file, pattern) == True:
        if fnmatch.filter(receivedFiles, receivePattern):
            file_name = fnmatch.filter(receivedFiles, receivePattern)
            print(file_name[0])
            print(f'csv file for adhoc 4 found')
            # Copy file
            shutil.copy(f'{receive_folder}/{file_name[0]}', f'{local_directory}/STG1D0/data.csv')
            print("csv file copied to local folder for parsing")
            # remove all files that was generated by this script.
            for csvfile in os.listdir(receive_folder):
              if fnmatch.fnmatch(csvfile, 'MCEG_STG1D0_ADHOC4*.csv'):
                  os.remove(f'{receive_folder}/{csvfile}')


            # add header row
            with open(f'{local_directory}/STG1D0/data.csv',newline='') as f:
                r = csv.reader(f)
                data = [line for line in r]
            with open(f'{local_directory}/STG1D0/data.csv','w',newline='') as f:
                w = csv.writer(f)
                w.writerow(['recordStatus',
                            'lastDateModified',
                            'lastTimeModified',
                            'lastUserToModify',
                            'legDepartureDate',
                            'airlineCode',
                            'identifier',
                            'sequence',
                            'flightOriginDay',
                            'numericFlightDate',
                            'numGMTDate',
                            'STDudt',
                            'STAudt',
                            'tailNumber',
                            'numLastDateModified',
                            'flightStatus',
                            'origin',
                            'STDLocal',
                            'dispatchDesk',
                            'STDGMTVariance',
                            'destination',
                            'STALocal',
                            'STAGMTVariance',
                            'OAGEquipmentType',
                            'ACConfiguration',
                            'serviceType',
                            'originGate',
                            'ETDlocal',
                            'ETDudt',
                            'TAXIutc',
                            'OUTudt',
                            'OFFudt',
                            'destinationGate',
                            'ETAlocal',
                            'ETAudt',
                            'ONudt',
                            'INudt',
                            'previousTailNumber',
                            'ETE',
                            'DCNutc',
                            'ETOutc',
                            'EONutc',
                            'EDTCutc',
                            'flightType',
                            'newDepartureCity',
                            'newArrivalCity',
                            'SchedOAGEquipType',
                            'OAGEquipSubType',
                            'csvFSDailyID',
                            'tailNumBeforeCancel',
                            'CTAUTC',
                            'cancelled',
                            'replaced',
                            'ATCStatus',
                            'scheduledFlightType',
                            'aircraftRouting',
                            'mealService',
                            'hub',
                            'landingRestriction',
                            'headStartFlight',
                            'actualDeparture',
                            'specialFlight',
                            'actualArrival',
                            'scheduledTaxiOut',
                            'scheduledTaxiIn',
                            'STOSetByUser',
                            'STISetByUser',
                            'CTFlightNumber'])
                w.writerows(data)
            with open(f'{local_directory}/STG1D0/data.csv') as f:
              reader = csv.DictReader(f)
              rows = list(reader)

            with open(f'{local_directory}/STG1D0/data.json', 'w') as f:
                json.dump(rows, f)

            try:
              mng_client = pymongo.MongoClient(uri)
              mng_db = mng_client['MCEG']
              collection_name = 'STG1D0'
              db_cm = mng_db[collection_name]
              cdir = Path(os.getcwd())
              file_res = f'{cdir}/STG1D0/data.csv'

              data = pd.read_csv(file_res)
              data_json = json.loads(data.to_json(orient='records'))
              x = db_cm.delete_many({})
              db_cm.insert(data_json)
            except Exception as e:
              print("type error: " + str(e))
              print(traceback.format_exc())


        else:
            # if file is not available abort the script
            print(f'Did not find csv file for adhoc 4')
            print('Check if the adhoc processor is down')
            pass

    check_if_folder_exist(stageReceive)

    call_adhoc_4_and_check_for_response_csv(stageReceive,stageSend,currentDirectory,currentDate)

    print('Finished Stage 1 day 0')

##################################################################################################################
############################################################## STG1 Day 1 (Today) ################################
def STG1D1_job():
    print('Starting Stage 1 day 1 data feed.')
    # mlab remote mongodb location
    uri = 'mongodb://0.0.0.0:27017/'

    # request drop location
    stageSend = Path('/mnt/gcsfile01/STG1/adh_receive')

    # response file location
    stageReceive = Path('/mnt/gcsfile01/STG1/adh_send')

    # current directory
    currentDirectory = Path(os.getcwd())

    # it is assumed that all flight origin date is the current day this script is running
    # extracting cuurent date in format DDMMMYY
    currentDay = datetime.datetime.now().strftime("%d")
    currentMonth = datetime.datetime.now().strftime("%b").upper()
    currentYear = datetime.datetime.now().strftime("%y")
    currentDate = f'{currentDay}{currentMonth}{currentYear}'
    # currentDate = '18APR18'

    # ############################## functions ##########################

    # Check if adhoc folders are visible from the current machine
    def check_if_folder_exist(location):
        if os.path.exists(location):
            print(f'[ {location} ] folder found')
        else:
            print(f'Could not find [ {location} ] folder!')
            print(f'make sure [ {location} ] is available from this machine!')
            sys.exit("Stopping script .......")



    # check for response csv, if exist copy to current directory for parsing
    def call_adhoc_4_and_check_for_response_csv(receive_folder, send_folder, local_directory, current_date):
        # note that repeat is needed since the adhoc processor sometimes does not return csv.
        # get current timestamp
        sendPattern = f'MCEG_STG1D1*.txt'
        timeStamp = datetime.datetime.now().strftime("%Y%m%d%H%M%S")
        sentFiles = os.listdir(send_folder)
        if fnmatch.filter(sentFiles, sendPattern):
          print('There are request files waiting on que, adhoc processor may be down')
        else:
          request_file = open(f'{send_folder}/MCEG_STG1D1_ADHOC4_{timeStamp}.txt', 'w')
          request_file.write(f'ADH004_{current_date}')
          adh004String = f'ADH004_{current_date}'
          request_file.close()
          print(f' Sending adhoc 4 request using: {adh004String}')
          time.sleep(25)
        # check if the file exist
        receivedFiles = os.listdir(receive_folder)
        receivePattern = f'MCEG_STG1D1_ADHOC4_{timeStamp}*.csv'
        # for file in os.listdir(receive_folder):
        # if fnmatch.fnmatch(file, pattern) == True:
        if fnmatch.filter(receivedFiles, receivePattern):
            file_name = fnmatch.filter(receivedFiles, receivePattern)
            print(file_name[0])
            print(f'csv file for adhoc 4 found')
            # Copy file
            shutil.copy(f'{receive_folder}/{file_name[0]}', f'{local_directory}/STG1D1/data.csv')
            print("csv file copied to local folder for parsing")
            # remove all files that was generated by this script.
            for csvfile in os.listdir(receive_folder):
              if fnmatch.fnmatch(csvfile, 'MCEG_STG1D1_ADHOC4*.csv'):
                  os.remove(f'{receive_folder}/{csvfile}')


            # add header row
            with open(f'{local_directory}/STG1D1/data.csv',newline='') as f:
                r = csv.reader(f)
                data = [line for line in r]
            with open(f'{local_directory}/STG1D1/data.csv','w',newline='') as f:
                w = csv.writer(f)
                w.writerow(['recordStatus',
                            'lastDateModified',
                            'lastTimeModified',
                            'lastUserToModify',
                            'legDepartureDate',
                            'airlineCode',
                            'identifier',
                            'sequence',
                            'flightOriginDay',
                            'numericFlightDate',
                            'numGMTDate',
                            'STDudt',
                            'STAudt',
                            'tailNumber',
                            'numLastDateModified',
                            'flightStatus',
                            'origin',
                            'STDLocal',
                            'dispatchDesk',
                            'STDGMTVariance',
                            'destination',
                            'STALocal',
                            'STAGMTVariance',
                            'OAGEquipmentType',
                            'ACConfiguration',
                            'serviceType',
                            'originGate',
                            'ETDlocal',
                            'ETDudt',
                            'TAXIutc',
                            'OUTudt',
                            'OFFudt',
                            'destinationGate',
                            'ETAlocal',
                            'ETAudt',
                            'ONudt',
                            'INudt',
                            'previousTailNumber',
                            'ETE',
                            'DCNutc',
                            'ETOutc',
                            'EONutc',
                            'EDTCutc',
                            'flightType',
                            'newDepartureCity',
                            'newArrivalCity',
                            'SchedOAGEquipType',
                            'OAGEquipSubType',
                            'csvFSDailyID',
                            'tailNumBeforeCancel',
                            'CTAUTC',
                            'cancelled',
                            'replaced',
                            'ATCStatus',
                            'scheduledFlightType',
                            'aircraftRouting',
                            'mealService',
                            'hub',
                            'landingRestriction',
                            'headStartFlight',
                            'actualDeparture',
                            'specialFlight',
                            'actualArrival',
                            'scheduledTaxiOut',
                            'scheduledTaxiIn',
                            'STOSetByUser',
                            'STISetByUser',
                            'CTFlightNumber'])
                w.writerows(data)
            with open(f'{local_directory}/STG1D1/data.csv') as f:
              reader = csv.DictReader(f)
              rows = list(reader)

            with open(f'{local_directory}/STG1D1/data.json', 'w') as f:
                json.dump(rows, f)

            try:
              mng_client = pymongo.MongoClient(uri)
              mng_db = mng_client['MCEG']
              collection_name = 'STG1D1'
              db_cm = mng_db[collection_name]
              cdir = Path(os.getcwd())
              file_res = f'{cdir}/STG1D1/data.csv'

              data = pd.read_csv(file_res)
              data_json = json.loads(data.to_json(orient='records'))
              x = db_cm.delete_many({})
              db_cm.insert(data_json)
            except Exception as e:
              print("type error: " + str(e))
              print(traceback.format_exc())

        else:
            # if file is not available abort the script
            print(f'Did not find csv file for adhoc 4')
            print('Check if the adhoc processor is down')
            pass

    check_if_folder_exist(stageReceive)

    call_adhoc_4_and_check_for_response_csv(stageReceive,stageSend,currentDirectory,currentDate)
    print('Finished Stage 1 day 1')

##################################################################################################################
#################################################### STG1 Day 2 (tomorrow) #######################################
def STG1D2_job():
    print('Starting Stage 1 day 2 data feed.')
    # mlab remote mongodb location
    uri = 'mongodb://0.0.0.0:27017/'

    # request drop location
    stageSend = Path('/mnt/gcsfile01/STG1/adh_receive')

    # response file location
    stageReceive = Path('/mnt/gcsfile01/STG1/adh_send')

    # current directory
    currentDirectory = Path(os.getcwd())

    # it is assumed that all flight origin date is the current day this script is running
    # extracting cuurent date in format DDMMMYY
    currentDay = (datetime.datetime.now() + datetime.timedelta(days=1)).strftime("%d")
    currentMonth = (datetime.datetime.now() + datetime.timedelta(days=1)).strftime("%b").upper()
    currentYear = (datetime.datetime.now() + datetime.timedelta(days=1)).strftime("%y")
    currentDate = f'{currentDay}{currentMonth}{currentYear}'

    # ############################## functions ##########################

    # Check if adhoc folders are visible from the current machine
    def check_if_folder_exist(location):
        if os.path.exists(location):
            print(f'[ {location} ] folder found')
        else:
            print(f'Could not find [ {location} ] folder!')
            print(f'make sure [ {location} ] is available from this machine!')
            sys.exit("Stopping script .......")



    # check for response csv, if exist copy to current directory for parsing
    def call_adhoc_4_and_check_for_response_csv(receive_folder, send_folder, local_directory, current_date):
        # note that repeat is needed since the adhoc processor sometimes does not return csv.
        # get current timestamp
        sendPattern = f'MCEG_STG1D2*.txt'
        timeStamp = datetime.datetime.now().strftime("%Y%m%d%H%M%S")
        sentFiles = os.listdir(send_folder)
        if fnmatch.filter(sentFiles, sendPattern):
          print('There are request files waiting on que, adhoc processor may be down')
        else:
          request_file = open(f'{send_folder}/MCEG_STG1D2_ADHOC4_{timeStamp}.txt', 'w')
          request_file.write(f'ADH004_{current_date}')
          adh004String = f'ADH004_{current_date}'
          request_file.close()
          print(f' Sending adhoc 4 request using: {adh004String}')
          time.sleep(25)
        # check if the file exist
        receivedFiles = os.listdir(receive_folder)
        receivePattern = f'MCEG_STG1D2_ADHOC4_{timeStamp}*.csv'
        # for file in os.listdir(receive_folder):
        # if fnmatch.fnmatch(file, pattern) == True:
        if fnmatch.filter(receivedFiles, receivePattern):
            file_name = fnmatch.filter(receivedFiles, receivePattern)
            print(file_name[0])
            print(f'csv file for adhoc 4 found')
            # Copy file
            shutil.copy(f'{receive_folder}/{file_name[0]}', f'{local_directory}/STG1D2/data.csv')
            print("csv file copied to local folder for parsing")
            # remove all files that was generated by this script.
            for csvfile in os.listdir(receive_folder):
              if fnmatch.fnmatch(csvfile, 'MCEG_STG1D2_ADHOC4*.csv'):
                  os.remove(f'{receive_folder}/{csvfile}')


            # add header row
            with open(f'{local_directory}/STG1D2/data.csv',newline='') as f:
                r = csv.reader(f)
                data = [line for line in r]
            with open(f'{local_directory}/STG1D2/data.csv','w',newline='') as f:
                w = csv.writer(f)
                w.writerow(['recordStatus',
                            'lastDateModified',
                            'lastTimeModified',
                            'lastUserToModify',
                            'legDepartureDate',
                            'airlineCode',
                            'identifier',
                            'sequence',
                            'flightOriginDay',
                            'numericFlightDate',
                            'numGMTDate',
                            'STDudt',
                            'STAudt',
                            'tailNumber',
                            'numLastDateModified',
                            'flightStatus',
                            'origin',
                            'STDLocal',
                            'dispatchDesk',
                            'STDGMTVariance',
                            'destination',
                            'STALocal',
                            'STAGMTVariance',
                            'OAGEquipmentType',
                            'ACConfiguration',
                            'serviceType',
                            'originGate',
                            'ETDlocal',
                            'ETDudt',
                            'TAXIutc',
                            'OUTudt',
                            'OFFudt',
                            'destinationGate',
                            'ETAlocal',
                            'ETAudt',
                            'ONudt',
                            'INudt',
                            'previousTailNumber',
                            'ETE',
                            'DCNutc',
                            'ETOutc',
                            'EONutc',
                            'EDTCutc',
                            'flightType',
                            'newDepartureCity',
                            'newArrivalCity',
                            'SchedOAGEquipType',
                            'OAGEquipSubType',
                            'csvFSDailyID',
                            'tailNumBeforeCancel',
                            'CTAUTC',
                            'cancelled',
                            'replaced',
                            'ATCStatus',
                            'scheduledFlightType',
                            'aircraftRouting',
                            'mealService',
                            'hub',
                            'landingRestriction',
                            'headStartFlight',
                            'actualDeparture',
                            'specialFlight',
                            'actualArrival',
                            'scheduledTaxiOut',
                            'scheduledTaxiIn',
                            'STOSetByUser',
                            'STISetByUser',
                            'CTFlightNumber'])
                w.writerows(data)
            with open(f'{local_directory}/STG1D2/data.csv') as f:
              reader = csv.DictReader(f)
              rows = list(reader)

            with open(f'{local_directory}/STG1D2/data.json', 'w') as f:
                json.dump(rows, f)

            try:
              mng_client = pymongo.MongoClient(uri)
              mng_db = mng_client['MCEG']
              collection_name = 'STG1D2'
              db_cm = mng_db[collection_name]
              cdir = Path(os.getcwd())
              file_res = f'{cdir}/STG1D2/data.csv'

              data = pd.read_csv(file_res)
              data_json = json.loads(data.to_json(orient='records'))
              x = db_cm.delete_many({})
              db_cm.insert(data_json)
            except Exception as e:
              print("type error: " + str(e))
              print(traceback.format_exc())

        else:
            # if file is not available abort the script
            print(f'Did not find csv file for adhoc 4')
            print('Check if the adhoc processor is down')
            pass

    check_if_folder_exist(stageReceive)

    call_adhoc_4_and_check_for_response_csv(stageReceive,stageSend,currentDirectory,currentDate)

    print('Finished Stage 1 day 2')

##################################################################################################################
############################################## STG1 Day 3 ########################################################
def STG1D3_job():
    print('Starting Stage 1 day 3 data feed.')
    # mlab remote mongodb location
    uri = 'mongodb://0.0.0.0:27017/'

    # request drop location
    stageSend = Path('/mnt/gcsfile01/STG1/adh_receive')

    # response file location
    stageReceive = Path('/mnt/gcsfile01/STG1/adh_send')

    # current directory
    currentDirectory = Path(os.getcwd())

    # it is assumed that all flight origin date is the current day this script is running
    # extracting cuurent date in format DDMMMYY
    currentDay = (datetime.datetime.now() + datetime.timedelta(days=2)).strftime("%d")
    currentMonth = (datetime.datetime.now() + datetime.timedelta(days=2)).strftime("%b").upper()
    currentYear = (datetime.datetime.now() + datetime.timedelta(days=2)).strftime("%y")
    currentDate = f'{currentDay}{currentMonth}{currentYear}'

    # ############################## functions ##########################

    # Check if adhoc folders are visible from the current machine
    def check_if_folder_exist(location):
        if os.path.exists(location):
            print(f'[ {location} ] folder found')
        else:
            print(f'Could not find [ {location} ] folder!')
            print(f'make sure [ {location} ] is available from this machine!')
            sys.exit("Stopping script .......")



    # check for response csv, if exist copy to current directory for parsing
    def call_adhoc_4_and_check_for_response_csv(receive_folder, send_folder, local_directory, current_date):
        # note that repeat is needed since the adhoc processor sometimes does not return csv.
        # get current timestamp
        sendPattern = f'MCEG_STG1D3*.txt'
        timeStamp = datetime.datetime.now().strftime("%Y%m%d%H%M%S")
        sentFiles = os.listdir(send_folder)
        if fnmatch.filter(sentFiles, sendPattern):
          print('There are request files waiting on que, adhoc processor may be down')
        else:
          request_file = open(f'{send_folder}/MCEG_STG1D3_ADHOC4_{timeStamp}.txt', 'w')
          request_file.write(f'ADH004_{current_date}')
          adh004String = f'ADH004_{current_date}'
          request_file.close()
          print(f' Sending adhoc 4 request using: {adh004String}')
          time.sleep(25)
        # check if the file exist
        receivedFiles = os.listdir(receive_folder)
        receivePattern = f'MCEG_STG1D3_ADHOC4_{timeStamp}*.csv'
        # for file in os.listdir(receive_folder):
        # if fnmatch.fnmatch(file, pattern) == True:
        if fnmatch.filter(receivedFiles, receivePattern):
            file_name = fnmatch.filter(receivedFiles, receivePattern)
            print(file_name[0])
            print(f'csv file for adhoc 4 found')
            # Copy file
            shutil.copy(f'{receive_folder}/{file_name[0]}', f'{local_directory}/STG1D3/data.csv')
            print("csv file copied to local folder for parsing")
            # remove all files that was generated by this script.
            for csvfile in os.listdir(receive_folder):
              if fnmatch.fnmatch(csvfile, 'MCEG_STG1D3_ADHOC4*.csv'):
                  os.remove(f'{receive_folder}/{csvfile}')


            # add header row
            with open(f'{local_directory}/STG1D3/data.csv',newline='') as f:
                r = csv.reader(f)
                data = [line for line in r]
            with open(f'{local_directory}/STG1D3/data.csv','w',newline='') as f:
                w = csv.writer(f)
                w.writerow(['recordStatus',
                            'lastDateModified',
                            'lastTimeModified',
                            'lastUserToModify',
                            'legDepartureDate',
                            'airlineCode',
                            'identifier',
                            'sequence',
                            'flightOriginDay',
                            'numericFlightDate',
                            'numGMTDate',
                            'STDudt',
                            'STAudt',
                            'tailNumber',
                            'numLastDateModified',
                            'flightStatus',
                            'origin',
                            'STDLocal',
                            'dispatchDesk',
                            'STDGMTVariance',
                            'destination',
                            'STALocal',
                            'STAGMTVariance',
                            'OAGEquipmentType',
                            'ACConfiguration',
                            'serviceType',
                            'originGate',
                            'ETDlocal',
                            'ETDudt',
                            'TAXIutc',
                            'OUTudt',
                            'OFFudt',
                            'destinationGate',
                            'ETAlocal',
                            'ETAudt',
                            'ONudt',
                            'INudt',
                            'previousTailNumber',
                            'ETE',
                            'DCNutc',
                            'ETOutc',
                            'EONutc',
                            'EDTCutc',
                            'flightType',
                            'newDepartureCity',
                            'newArrivalCity',
                            'SchedOAGEquipType',
                            'OAGEquipSubType',
                            'csvFSDailyID',
                            'tailNumBeforeCancel',
                            'CTAUTC',
                            'cancelled',
                            'replaced',
                            'ATCStatus',
                            'scheduledFlightType',
                            'aircraftRouting',
                            'mealService',
                            'hub',
                            'landingRestriction',
                            'headStartFlight',
                            'actualDeparture',
                            'specialFlight',
                            'actualArrival',
                            'scheduledTaxiOut',
                            'scheduledTaxiIn',
                            'STOSetByUser',
                            'STISetByUser',
                            'CTFlightNumber'])
                w.writerows(data)
            with open(f'{local_directory}/STG1D3/data.csv') as f:
              reader = csv.DictReader(f)
              rows = list(reader)

            with open(f'{local_directory}/STG1D3/data.json', 'w') as f:
                json.dump(rows, f)

            try:
              mng_client = pymongo.MongoClient(uri)
              mng_db = mng_client['MCEG']
              collection_name = 'STG1D3'
              db_cm = mng_db[collection_name]
              cdir = Path(os.getcwd())
              file_res = f'{cdir}/STG1D3/data.csv'

              data = pd.read_csv(file_res)
              data_json = json.loads(data.to_json(orient='records'))
              x = db_cm.delete_many({})
              db_cm.insert(data_json)
            except Exception as e:
              print("type error: " + str(e))
              print(traceback.format_exc())

        else:
            # if file is not available abort the script
            print(f'Did not find csv file for adhoc 4')
            print('Check if the adhoc processor is down')
            pass

    check_if_folder_exist(stageReceive)

    call_adhoc_4_and_check_for_response_csv(stageReceive,stageSend,currentDirectory,currentDate)


    print('Finished Stage 1 day 3')

##################################################################################################################
############################################ STG1 Day 4 ########################################################
def STG1D4_job():
    print('Starting Stage 1 day 4 data feed.')
    # mlab remote mongodb location
    uri = 'mongodb://0.0.0.0:27017/'

    # request drop location
    stageSend = Path('/mnt/gcsfile01/STG1/adh_receive')

    # response file location
    stageReceive = Path('/mnt/gcsfile01/STG1/adh_send')

    # current directory
    currentDirectory = Path(os.getcwd())

    # it is assumed that all flight origin date is the current day this script is running
    # extracting cuurent date in format DDMMMYY
    currentDay = (datetime.datetime.now() + datetime.timedelta(days=3)).strftime("%d")
    currentMonth = (datetime.datetime.now() + datetime.timedelta(days=3)).strftime("%b").upper()
    currentYear = (datetime.datetime.now() + datetime.timedelta(days=3)).strftime("%y")
    currentDate = f'{currentDay}{currentMonth}{currentYear}'

    # ############################## functions ##########################

    # Check if adhoc folders are visible from the current machine
    def check_if_folder_exist(location):
        if os.path.exists(location):
            print(f'[ {location} ] folder found')
        else:
            print(f'Could not find [ {location} ] folder!')
            print(f'make sure [ {location} ] is available from this machine!')
            sys.exit("Stopping script .......")



    # check for response csv, if exist copy to current directory for parsing
    def call_adhoc_4_and_check_for_response_csv(receive_folder, send_folder, local_directory, current_date):
        # note that repeat is needed since the adhoc processor sometimes does not return csv.
        # get current timestamp
        sendPattern = f'MCEG_STG1D4*.txt'
        timeStamp = datetime.datetime.now().strftime("%Y%m%d%H%M%S")
        sentFiles = os.listdir(send_folder)
        if fnmatch.filter(sentFiles, sendPattern):
          print('There are request files waiting on que, adhoc processor may be down')
        else:
          request_file = open(f'{send_folder}/MCEG_STG1D4_ADHOC4_{timeStamp}.txt', 'w')
          request_file.write(f'ADH004_{current_date}')
          adh004String = f'ADH004_{current_date}'
          request_file.close()
          print(f' Sending adhoc 4 request using: {adh004String}')
          time.sleep(25)
        # check if the file exist
        receivedFiles = os.listdir(receive_folder)
        receivePattern = f'MCEG_STG1D4_ADHOC4_{timeStamp}*.csv'
        # for file in os.listdir(receive_folder):
        # if fnmatch.fnmatch(file, pattern) == True:
        if fnmatch.filter(receivedFiles, receivePattern):
            file_name = fnmatch.filter(receivedFiles, receivePattern)
            print(file_name[0])
            print(f'csv file for adhoc 4 found')
            # Copy file
            shutil.copy(f'{receive_folder}/{file_name[0]}', f'{local_directory}/STG1D4/data.csv')
            print("csv file copied to local folder for parsing")
            # remove all files that was generated by this script.
            for csvfile in os.listdir(receive_folder):
              if fnmatch.fnmatch(csvfile, 'MCEG_STG1D4_ADHOC4*.csv'):
                  os.remove(f'{receive_folder}/{csvfile}')


            # add header row
            with open(f'{local_directory}/STG1D4/data.csv',newline='') as f:
                r = csv.reader(f)
                data = [line for line in r]
            with open(f'{local_directory}/STG1D4/data.csv','w',newline='') as f:
                w = csv.writer(f)
                w.writerow(['recordStatus',
                            'lastDateModified',
                            'lastTimeModified',
                            'lastUserToModify',
                            'legDepartureDate',
                            'airlineCode',
                            'identifier',
                            'sequence',
                            'flightOriginDay',
                            'numericFlightDate',
                            'numGMTDate',
                            'STDudt',
                            'STAudt',
                            'tailNumber',
                            'numLastDateModified',
                            'flightStatus',
                            'origin',
                            'STDLocal',
                            'dispatchDesk',
                            'STDGMTVariance',
                            'destination',
                            'STALocal',
                            'STAGMTVariance',
                            'OAGEquipmentType',
                            'ACConfiguration',
                            'serviceType',
                            'originGate',
                            'ETDlocal',
                            'ETDudt',
                            'TAXIutc',
                            'OUTudt',
                            'OFFudt',
                            'destinationGate',
                            'ETAlocal',
                            'ETAudt',
                            'ONudt',
                            'INudt',
                            'previousTailNumber',
                            'ETE',
                            'DCNutc',
                            'ETOutc',
                            'EONutc',
                            'EDTCutc',
                            'flightType',
                            'newDepartureCity',
                            'newArrivalCity',
                            'SchedOAGEquipType',
                            'OAGEquipSubType',
                            'csvFSDailyID',
                            'tailNumBeforeCancel',
                            'CTAUTC',
                            'cancelled',
                            'replaced',
                            'ATCStatus',
                            'scheduledFlightType',
                            'aircraftRouting',
                            'mealService',
                            'hub',
                            'landingRestriction',
                            'headStartFlight',
                            'actualDeparture',
                            'specialFlight',
                            'actualArrival',
                            'scheduledTaxiOut',
                            'scheduledTaxiIn',
                            'STOSetByUser',
                            'STISetByUser',
                            'CTFlightNumber'])
                w.writerows(data)
            with open(f'{local_directory}/STG1D4/data.csv') as f:
              reader = csv.DictReader(f)
              rows = list(reader)

            with open(f'{local_directory}/STG1D4/data.json', 'w') as f:
                json.dump(rows, f)
            try:
              mng_client = pymongo.MongoClient(uri)
              mng_db = mng_client['MCEG']
              collection_name = 'STG1D4'
              db_cm = mng_db[collection_name]
              cdir = Path(os.getcwd())
              file_res = f'{cdir}/STG1D4/data.csv'

              data = pd.read_csv(file_res)
              data_json = json.loads(data.to_json(orient='records'))
              x = db_cm.delete_many({})
              db_cm.insert(data_json)
            except Exception as e:
              print("type error: " + str(e))
              print(traceback.format_exc())

        else:
            # if file is not available abort the script
            print(f'Did not find csv file for adhoc 4')
            print('Check if the adhoc processor is down')
            pass

    check_if_folder_exist(stageReceive)

    call_adhoc_4_and_check_for_response_csv(stageReceive,stageSend,currentDirectory,currentDate)


    print('Finished Stage 1 day 4')

##################################################################################################################
############################################# STG1 Day 5 ######################################################
def STG1D5_job():
    print('Starting Stage 1 day 5 data feed.')
    # mlab remote mongodb location
    uri = 'mongodb://0.0.0.0:27017/'

    # request drop location
    stageSend = Path('/mnt/gcsfile01/STG1/adh_receive')

    # response file location
    stageReceive = Path('/mnt/gcsfile01/STG1/adh_send')

    # current directory
    currentDirectory = Path(os.getcwd())

    # it is assumed that all flight origin date is the current day this script is running
    # extracting cuurent date in format DDMMMYY
    currentDay = (datetime.datetime.now() + datetime.timedelta(days=4)).strftime("%d")
    currentMonth = (datetime.datetime.now() + datetime.timedelta(days=4)).strftime("%b").upper()
    currentYear = (datetime.datetime.now() + datetime.timedelta(days=4)).strftime("%y")
    currentDate = f'{currentDay}{currentMonth}{currentYear}'

    # ############################## functions ##########################

    # Check if adhoc folders are visible from the current machine
    def check_if_folder_exist(location):
        if os.path.exists(location):
            print(f'[ {location} ] folder found')
        else:
            print(f'Could not find [ {location} ] folder!')
            print(f'make sure [ {location} ] is available from this machine!')
            sys.exit("Stopping script .......")



    # check for response csv, if exist copy to current directory for parsing
    def call_adhoc_4_and_check_for_response_csv(receive_folder, send_folder, local_directory, current_date):
        # note that repeat is needed since the adhoc processor sometimes does not return csv.
        # get current timestamp
        sendPattern = f'MCEG_STG1D5*.txt'
        timeStamp = datetime.datetime.now().strftime("%Y%m%d%H%M%S")
        sentFiles = os.listdir(send_folder)
        if fnmatch.filter(sentFiles, sendPattern):
          print('There are request files waiting on que, adhoc processor may be down')
        else:
          request_file = open(f'{send_folder}/MCEG_STG1D5_ADHOC4_{timeStamp}.txt', 'w')
          request_file.write(f'ADH004_{current_date}')
          adh004String = f'ADH004_{current_date}'
          request_file.close()
          print(f' Sending adhoc 4 request using: {adh004String}')
          time.sleep(25)
        # check if the file exist
        receivedFiles = os.listdir(receive_folder)
        receivePattern = f'MCEG_STG1D5_ADHOC4_{timeStamp}*.csv'
        # for file in os.listdir(receive_folder):
        # if fnmatch.fnmatch(file, pattern) == True:
        if fnmatch.filter(receivedFiles, receivePattern):
            file_name = fnmatch.filter(receivedFiles, receivePattern)
            print(file_name[0])
            print(f'csv file for adhoc 4 found')
            # Copy file
            shutil.copy(f'{receive_folder}/{file_name[0]}', f'{local_directory}/STG1D5/data.csv')
            print("csv file copied to local folder for parsing")
            # remove all files that was generated by this script.
            for csvfile in os.listdir(receive_folder):
              if fnmatch.fnmatch(csvfile, 'MCEG_STG1D5_ADHOC4*.csv'):
                  os.remove(f'{receive_folder}/{csvfile}')


            # add header row
            with open(f'{local_directory}/STG1D5/data.csv',newline='') as f:
                r = csv.reader(f)
                data = [line for line in r]
            with open(f'{local_directory}/STG1D5/data.csv','w',newline='') as f:
                w = csv.writer(f)
                w.writerow(['recordStatus',
                            'lastDateModified',
                            'lastTimeModified',
                            'lastUserToModify',
                            'legDepartureDate',
                            'airlineCode',
                            'identifier',
                            'sequence',
                            'flightOriginDay',
                            'numericFlightDate',
                            'numGMTDate',
                            'STDudt',
                            'STAudt',
                            'tailNumber',
                            'numLastDateModified',
                            'flightStatus',
                            'origin',
                            'STDLocal',
                            'dispatchDesk',
                            'STDGMTVariance',
                            'destination',
                            'STALocal',
                            'STAGMTVariance',
                            'OAGEquipmentType',
                            'ACConfiguration',
                            'serviceType',
                            'originGate',
                            'ETDlocal',
                            'ETDudt',
                            'TAXIutc',
                            'OUTudt',
                            'OFFudt',
                            'destinationGate',
                            'ETAlocal',
                            'ETAudt',
                            'ONudt',
                            'INudt',
                            'previousTailNumber',
                            'ETE',
                            'DCNutc',
                            'ETOutc',
                            'EONutc',
                            'EDTCutc',
                            'flightType',
                            'newDepartureCity',
                            'newArrivalCity',
                            'SchedOAGEquipType',
                            'OAGEquipSubType',
                            'csvFSDailyID',
                            'tailNumBeforeCancel',
                            'CTAUTC',
                            'cancelled',
                            'replaced',
                            'ATCStatus',
                            'scheduledFlightType',
                            'aircraftRouting',
                            'mealService',
                            'hub',
                            'landingRestriction',
                            'headStartFlight',
                            'actualDeparture',
                            'specialFlight',
                            'actualArrival',
                            'scheduledTaxiOut',
                            'scheduledTaxiIn',
                            'STOSetByUser',
                            'STISetByUser',
                            'CTFlightNumber'])
                w.writerows(data)
            with open(f'{local_directory}/STG1D5/data.csv') as f:
              reader = csv.DictReader(f)
              rows = list(reader)

            with open(f'{local_directory}/STG1D5/data.json', 'w') as f:
                json.dump(rows, f)
            try:
              mng_client = pymongo.MongoClient(uri)
              mng_db = mng_client['MCEG']
              collection_name = 'STG1D5'
              db_cm = mng_db[collection_name]
              cdir = Path(os.getcwd())
              file_res = f'{cdir}/STG1D5/data.csv'

              data = pd.read_csv(file_res)
              data_json = json.loads(data.to_json(orient='records'))
              x = db_cm.delete_many({})
              db_cm.insert(data_json)
            except Exception as e:
              print("type error: " + str(e))
              print(traceback.format_exc())

        else:
            # if file is not available abort the script
            print(f'Did not find csv file for adhoc 4')
            print('Check if the adhoc processor is down')
            pass

    check_if_folder_exist(stageReceive)

    call_adhoc_4_and_check_for_response_csv(stageReceive,stageSend,currentDirectory,currentDate)


    print('Finished Stage 1 day 5')

##################################################################################################################
################################################ STG1 Day 6 ######################################################
def STG1D6_job():
    print('Starting Stage 1 day 6 data feed.')
    # mlab remote mongodb location
    uri = 'mongodb://0.0.0.0:27017/'

    # request drop location
    stageSend = Path('/mnt/gcsfile01/STG1/adh_receive')

    # response file location
    stageReceive = Path('/mnt/gcsfile01/STG1/adh_send')

    # current directory
    currentDirectory = Path(os.getcwd())

    # it is assumed that all flight origin date is the current day this script is running
    # extracting cuurent date in format DDMMMYY
    currentDay = (datetime.datetime.now() + datetime.timedelta(days=5)).strftime("%d")
    currentMonth = (datetime.datetime.now() + datetime.timedelta(days=5)).strftime("%b").upper()
    currentYear = (datetime.datetime.now() + datetime.timedelta(days=5)).strftime("%y")
    currentDate = f'{currentDay}{currentMonth}{currentYear}'

    # ############################## functions ##########################

    # Check if adhoc folders are visible from the current machine
    def check_if_folder_exist(location):
        if os.path.exists(location):
            print(f'[ {location} ] folder found')
        else:
            print(f'Could not find [ {location} ] folder!')
            print(f'make sure [ {location} ] is available from this machine!')
            sys.exit("Stopping script .......")



    # check for response csv, if exist copy to current directory for parsing
    def call_adhoc_4_and_check_for_response_csv(receive_folder, send_folder, local_directory, current_date):
        # note that repeat is needed since the adhoc processor sometimes does not return csv.
        # get current timestamp
        sendPattern = f'MCEG_STG1D6*.txt'
        timeStamp = datetime.datetime.now().strftime("%Y%m%d%H%M%S")
        sentFiles = os.listdir(send_folder)
        if fnmatch.filter(sentFiles, sendPattern):
          print('There are request files waiting on que, adhoc processor may be down')
        else:
          request_file = open(f'{send_folder}/MCEG_STG1D6_ADHOC4_{timeStamp}.txt', 'w')
          request_file.write(f'ADH004_{current_date}')
          adh004String = f'ADH004_{current_date}'
          request_file.close()
          print(f' Sending adhoc 4 request using: {adh004String}')
          time.sleep(25)
        # check if the file exist
        receivedFiles = os.listdir(receive_folder)
        receivePattern = f'MCEG_STG1D6_ADHOC4_{timeStamp}*.csv'
        # for file in os.listdir(receive_folder):
        # if fnmatch.fnmatch(file, pattern) == True:
        if fnmatch.filter(receivedFiles, receivePattern):
            file_name = fnmatch.filter(receivedFiles, receivePattern)
            print(file_name[0])
            print(f'csv file for adhoc 4 found')
            # Copy file
            shutil.copy(f'{receive_folder}/{file_name[0]}', f'{local_directory}/STG1D6/data.csv')
            print("csv file copied to local folder for parsing")
            # remove all files that was generated by this script.
            for csvfile in os.listdir(receive_folder):
              if fnmatch.fnmatch(csvfile, 'MCEG_STG1D6_ADHOC4*.csv'):
                  os.remove(f'{receive_folder}/{csvfile}')


            # add header row
            with open(f'{local_directory}/STG1D6/data.csv',newline='') as f:
                r = csv.reader(f)
                data = [line for line in r]
            with open(f'{local_directory}/STG1D6/data.csv','w',newline='') as f:
                w = csv.writer(f)
                w.writerow(['recordStatus',
                            'lastDateModified',
                            'lastTimeModified',
                            'lastUserToModify',
                            'legDepartureDate',
                            'airlineCode',
                            'identifier',
                            'sequence',
                            'flightOriginDay',
                            'numericFlightDate',
                            'numGMTDate',
                            'STDudt',
                            'STAudt',
                            'tailNumber',
                            'numLastDateModified',
                            'flightStatus',
                            'origin',
                            'STDLocal',
                            'dispatchDesk',
                            'STDGMTVariance',
                            'destination',
                            'STALocal',
                            'STAGMTVariance',
                            'OAGEquipmentType',
                            'ACConfiguration',
                            'serviceType',
                            'originGate',
                            'ETDlocal',
                            'ETDudt',
                            'TAXIutc',
                            'OUTudt',
                            'OFFudt',
                            'destinationGate',
                            'ETAlocal',
                            'ETAudt',
                            'ONudt',
                            'INudt',
                            'previousTailNumber',
                            'ETE',
                            'DCNutc',
                            'ETOutc',
                            'EONutc',
                            'EDTCutc',
                            'flightType',
                            'newDepartureCity',
                            'newArrivalCity',
                            'SchedOAGEquipType',
                            'OAGEquipSubType',
                            'csvFSDailyID',
                            'tailNumBeforeCancel',
                            'CTAUTC',
                            'cancelled',
                            'replaced',
                            'ATCStatus',
                            'scheduledFlightType',
                            'aircraftRouting',
                            'mealService',
                            'hub',
                            'landingRestriction',
                            'headStartFlight',
                            'actualDeparture',
                            'specialFlight',
                            'actualArrival',
                            'scheduledTaxiOut',
                            'scheduledTaxiIn',
                            'STOSetByUser',
                            'STISetByUser',
                            'CTFlightNumber'])
                w.writerows(data)
            with open(f'{local_directory}/STG1D6/data.csv') as f:
              reader = csv.DictReader(f)
              rows = list(reader)

            with open(f'{local_directory}/STG1D6/data.json', 'w') as f:
                json.dump(rows, f)
            try:
              mng_client = pymongo.MongoClient(uri)
              mng_db = mng_client['MCEG']
              collection_name = 'STG1D6'
              db_cm = mng_db[collection_name]
              cdir = Path(os.getcwd())
              file_res = f'{cdir}/STG1D6/data.csv'

              data = pd.read_csv(file_res)
              data_json = json.loads(data.to_json(orient='records'))
              x = db_cm.delete_many({})
              db_cm.insert(data_json)
            except Exception as e:
              print("type error: " + str(e))
              print(traceback.format_exc())

        else:
            # if file is not available abort the script
            print(f'Did not find csv file for adhoc 4')
            print('Check if the adhoc processor is down')
            pass

    check_if_folder_exist(stageReceive)

    call_adhoc_4_and_check_for_response_csv(stageReceive,stageSend,currentDirectory,currentDate)


    print('Finished Stage 1 day 6')

##################################################################################################################
################################################# STG Day 7 #####################################################
def STG1D7_job():
    print('Starting Stage 1 day 7 data feed.')
    # mlab remote mongodb location
    uri = 'mongodb://0.0.0.0:27017/'

    # request drop location
    stageSend = Path('/mnt/gcsfile01/STG1/adh_receive')

    # response file location
    stageReceive = Path('/mnt/gcsfile01/STG1/adh_send')

    # current directory
    currentDirectory = Path(os.getcwd())

    # it is assumed that all flight origin date is the current day this script is running
    # extracting cuurent date in format DDMMMYY
    currentDay = (datetime.datetime.now() + datetime.timedelta(days=6)).strftime("%d")
    currentMonth = (datetime.datetime.now() + datetime.timedelta(days=6)).strftime("%b").upper()
    currentYear = (datetime.datetime.now() + datetime.timedelta(days=6)).strftime("%y")
    currentDate = f'{currentDay}{currentMonth}{currentYear}'

    # ############################## functions ##########################

    # Check if adhoc folders are visible from the current machine
    def check_if_folder_exist(location):
        if os.path.exists(location):
            print(f'[ {location} ] folder found')
        else:
            print(f'Could not find [ {location} ] folder!')
            print(f'make sure [ {location} ] is available from this machine!')
            sys.exit("Stopping script .......")



    # check for response csv, if exist copy to current directory for parsing
    def call_adhoc_4_and_check_for_response_csv(receive_folder, send_folder, local_directory, current_date):
        # note that repeat is needed since the adhoc processor sometimes does not return csv.
        # get current timestamp
        sendPattern = f'MCEG_STG1D7*.txt'
        timeStamp = datetime.datetime.now().strftime("%Y%m%d%H%M%S")
        sentFiles = os.listdir(send_folder)
        if fnmatch.filter(sentFiles, sendPattern):
          print('There are request files waiting on que, adhoc processor may be down')
        else:
          request_file = open(f'{send_folder}/MCEG_STG1D7_ADHOC4_{timeStamp}.txt', 'w')
          request_file.write(f'ADH004_{current_date}')
          adh004String = f'ADH004_{current_date}'
          request_file.close()
          print(f' Sending adhoc 4 request using: {adh004String}')
          time.sleep(25)
        # check if the file exist
        receivedFiles = os.listdir(receive_folder)
        receivePattern = f'MCEG_STG1D7_ADHOC4_{timeStamp}*.csv'
        # for file in os.listdir(receive_folder):
        # if fnmatch.fnmatch(file, pattern) == True:
        if fnmatch.filter(receivedFiles, receivePattern):
            file_name = fnmatch.filter(receivedFiles, receivePattern)
            print(file_name[0])
            print(f'csv file for adhoc 4 found')
            # Copy file
            shutil.copy(f'{receive_folder}/{file_name[0]}', f'{local_directory}/STG1D7/data.csv')
            print("csv file copied to local folder for parsing")
            # remove all files that was generated by this script.
            for csvfile in os.listdir(receive_folder):
              if fnmatch.fnmatch(csvfile, 'MCEG_STG1D7_ADHOC4*.csv'):
                  os.remove(f'{receive_folder}/{csvfile}')


            # add header row
            with open(f'{local_directory}/STG1D7/data.csv',newline='') as f:
                r = csv.reader(f)
                data = [line for line in r]
            with open(f'{local_directory}/STG1D7/data.csv','w',newline='') as f:
                w = csv.writer(f)
                w.writerow(['recordStatus',
                            'lastDateModified',
                            'lastTimeModified',
                            'lastUserToModify',
                            'legDepartureDate',
                            'airlineCode',
                            'identifier',
                            'sequence',
                            'flightOriginDay',
                            'numericFlightDate',
                            'numGMTDate',
                            'STDudt',
                            'STAudt',
                            'tailNumber',
                            'numLastDateModified',
                            'flightStatus',
                            'origin',
                            'STDLocal',
                            'dispatchDesk',
                            'STDGMTVariance',
                            'destination',
                            'STALocal',
                            'STAGMTVariance',
                            'OAGEquipmentType',
                            'ACConfiguration',
                            'serviceType',
                            'originGate',
                            'ETDlocal',
                            'ETDudt',
                            'TAXIutc',
                            'OUTudt',
                            'OFFudt',
                            'destinationGate',
                            'ETAlocal',
                            'ETAudt',
                            'ONudt',
                            'INudt',
                            'previousTailNumber',
                            'ETE',
                            'DCNutc',
                            'ETOutc',
                            'EONutc',
                            'EDTCutc',
                            'flightType',
                            'newDepartureCity',
                            'newArrivalCity',
                            'SchedOAGEquipType',
                            'OAGEquipSubType',
                            'csvFSDailyID',
                            'tailNumBeforeCancel',
                            'CTAUTC',
                            'cancelled',
                            'replaced',
                            'ATCStatus',
                            'scheduledFlightType',
                            'aircraftRouting',
                            'mealService',
                            'hub',
                            'landingRestriction',
                            'headStartFlight',
                            'actualDeparture',
                            'specialFlight',
                            'actualArrival',
                            'scheduledTaxiOut',
                            'scheduledTaxiIn',
                            'STOSetByUser',
                            'STISetByUser',
                            'CTFlightNumber'])
                w.writerows(data)
            with open(f'{local_directory}/STG1D7/data.csv') as f:
              reader = csv.DictReader(f)
              rows = list(reader)

            with open(f'{local_directory}/STG1D7/data.json', 'w') as f:
                json.dump(rows, f)
            try:
              mng_client = pymongo.MongoClient(uri)
              mng_db = mng_client['MCEG']
              collection_name = 'STG1D7'
              db_cm = mng_db[collection_name]
              cdir = Path(os.getcwd())
              file_res = f'{cdir}/STG1D7/data.csv'

              data = pd.read_csv(file_res)
              data_json = json.loads(data.to_json(orient='records'))
              x = db_cm.delete_many({})
              db_cm.insert(data_json)
            except Exception as e:
              print("type error: " + str(e))
              print(traceback.format_exc())

        else:
            # if file is not available abort the script
            print(f'Did not find csv file for adhoc 4')
            print('Check if the adhoc processor is down')
            pass

    check_if_folder_exist(stageReceive)

    call_adhoc_4_and_check_for_response_csv(stageReceive,stageSend,currentDirectory,currentDate)


    print('Finished Stage 1 day 7')

##########################################################################################################################
############################################# End of function defination #################################################

scheduler = BlockingScheduler()
scheduler.add_job(STG1D0_job, 'interval', seconds=30)
scheduler.add_job(STG1D1_job, 'interval', seconds=30)
scheduler.add_job(STG1D2_job, 'interval', seconds=30)
scheduler.add_job(STG1D3_job, 'interval', seconds=30)
scheduler.add_job(STG1D4_job, 'interval', seconds=30)
scheduler.add_job(STG1D5_job, 'interval', seconds=30)
scheduler.add_job(STG1D6_job, 'interval', seconds=30)
scheduler.add_job(STG1D7_job, 'interval', seconds=30)
scheduler.start()
